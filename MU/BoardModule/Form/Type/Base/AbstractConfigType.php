<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Form\Type\Base;

use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use MU\BoardModule\Form\Type\Field\MultiListType;
use MU\BoardModule\AppSettings;
use MU\BoardModule\Helper\ListEntriesHelper;

/**
 * Configuration form type base class.
 */
abstract class AbstractConfigType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * ConfigType constructor.
     *
     * @param TranslatorInterface $translator Translator service instance
     * @param ListEntriesHelper $listHelper ListEntriesHelper service instance
     */
    public function __construct(
        TranslatorInterface $translator,
        ListEntriesHelper $listHelper
    ) {
        $this->setTranslator($translator);
        $this->listHelper = $listHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(TranslatorInterface $translator)
    {
        $this->translator = $translator;
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralFields($builder, $options);
        $this->addLayoutFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addListViewsFields($builder, $options);
        $this->addImagesFields($builder, $options);
        $this->addIntegrationFields($builder, $options);

        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds fields for general fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeneralFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('uploadImages', CheckboxType::class, [
            'label' => $this->__('Upload images') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('The upload images option')
            ],
            'required' => false,
        ]);
        
        $builder->add('allowedSizeOfImages', TextType::class, [
            'label' => $this->__('Allowed size of images') . ':',
            'empty_data' => '200k',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the allowed size of images.')
            ],
            'required' => false,
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'numberImages');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('numberImages', ChoiceType::class, [
            'label' => $this->__('Number images') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the number images.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('uploadFiles', CheckboxType::class, [
            'label' => $this->__('Upload files') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('The upload files option')
            ],
            'required' => false,
        ]);
        
        $builder->add('allowedSizeOfFiles', TextType::class, [
            'label' => $this->__('Allowed size of files') . ':',
            'empty_data' => '200k',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the allowed size of files.')
            ],
            'required' => false,
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'numberFiles');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('numberFiles', ChoiceType::class, [
            'label' => $this->__('Number files') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the number files.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('editPostings', CheckboxType::class, [
            'label' => $this->__('Edit postings') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('The edit postings option')
            ],
            'required' => false,
        ]);
        
        $builder->add('editTime', IntegerType::class, [
            'label' => $this->__('Edit time') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Time of editing allowed in hours.')
            ],
            'help' => $this->__('Time of editing allowed in hours.'),
            'empty_data' => '6',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the edit time.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => false,
            'scale' => 0
        ]);
        
        $builder->add('latestPostings', IntegerType::class, [
            'label' => $this->__('Latest postings') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('In Hours.')
            ],
            'help' => $this->__('In Hours.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the latest postings.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => false,
            'scale' => 0
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'sortingCategories');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('sortingCategories', ChoiceType::class, [
            'label' => $this->__('Sorting categories') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the sorting categories.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'sortingForums');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('sortingForums', ChoiceType::class, [
            'label' => $this->__('Sorting forums') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the sorting forums.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'sortingPostings');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('sortingPostings', ChoiceType::class, [
            'label' => $this->__('Sorting postings') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the sorting postings.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('standardIcon', TextType::class, [
            'label' => $this->__('Standard icon') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the standard icon.')
            ],
            'required' => false,
        ]);
        
        $builder->add('specialIcon', TextType::class, [
            'label' => $this->__('Special icon') . ':',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Enter the special icon.')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for layout fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addLayoutFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'iconSet');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('iconSet', ChoiceType::class, [
            'label' => $this->__('Icon set') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the icon set.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'template');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('template', ChoiceType::class, [
            'label' => $this->__('Template') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the template.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('showStatisticInDetails', CheckboxType::class, [
            'label' => $this->__('Show statistic in details') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('The show statistic in details option')
            ],
            'required' => false,
        ]);
        
        $builder->add('showStatisticOnBottom', CheckboxType::class, [
            'label' => $this->__('Show statistic on bottom') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('The show statistic on bottom option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('moderationGroupForPostings', EntityType::class, [
            'label' => $this->__('Moderation group for postings') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
            ],
            'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
            'empty_data' => '2',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => $this->__('Choose the moderation group for postings')
            ],
            'required' => true,
            // Zikula core should provide a form type for this to hide entity details
            'class' => 'ZikulaGroupsModule:GroupEntity',
            'choice_label' => 'name',
            'choice_value' => 'gid'
        ]);
    }

    /**
     * Adds fields for list views fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListViewsFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('categoryEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Category entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of categories shown per page')
            ],
            'help' => $this->__('The amount of categories shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the category entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('linkOwnCategoriesOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own categories on account page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to categories of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to categories of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own categories on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('forumEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Forum entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of forums shown per page')
            ],
            'help' => $this->__('The amount of forums shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the forum entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('linkOwnForumsOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own forums on account page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to forums of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to forums of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own forums on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('postingEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Posting entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of postings shown per page')
            ],
            'help' => $this->__('The amount of postings shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the posting entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('linkOwnPostingsOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own postings on account page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to postings of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to postings of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own postings on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('aboEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Abo entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of abos shown per page')
            ],
            'help' => $this->__('The amount of abos shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the abo entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('linkOwnAbosOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own abos on account page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to abos of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to abos of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own abos on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('userEntriesPerPage', IntegerType::class, [
            'label' => $this->__('User entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of users shown per page')
            ],
            'help' => $this->__('The amount of users shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the user entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('rankEntriesPerPage', IntegerType::class, [
            'label' => $this->__('Rank entries per page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The amount of ranks shown per page')
            ],
            'help' => $this->__('The amount of ranks shown per page'),
            'empty_data' => '10',
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => $this->__('Enter the rank entries per page.') . ' ' . $this->__('Only digits are allowed.')
            ],
            'required' => true,
            'scale' => 0
        ]);
        
        $builder->add('linkOwnRanksOnAccountPage', CheckboxType::class, [
            'label' => $this->__('Link own ranks on account page') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to add a link to ranks of the current user on his account page')
            ],
            'help' => $this->__('Whether to add a link to ranks of the current user on his account page'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The link own ranks on account page option')
            ],
            'required' => false,
        ]);
        
        $builder->add('showOnlyOwnEntries', CheckboxType::class, [
            'label' => $this->__('Show only own entries') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether only own entries should be shown on view pages by default or not')
            ],
            'help' => $this->__('Whether only own entries should be shown on view pages by default or not'),
            'attr' => [
                'class' => '',
                'title' => $this->__('The show only own entries option')
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds fields for images fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addImagesFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $builder->add('enableShrinkingForPostingFirstImage', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for posting first image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthPostingFirstImage', IntegerType::class, [
            'label' => $this->__('Shrink width posting first image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => '800',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightPostingFirstImage', IntegerType::class, [
            'label' => $this->__('Shrink height posting first image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => '600',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModePostingFirstImage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModePostingFirstImage', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode posting first image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthPostingFirstImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting first image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => '32',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingFirstImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting first image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostingFirstImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting first image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingFirstImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting first image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostingFirstImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting first image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingFirstImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting first image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('enableShrinkingForPostingSecondImage', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for posting second image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthPostingSecondImage', IntegerType::class, [
            'label' => $this->__('Shrink width posting second image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => '800',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightPostingSecondImage', IntegerType::class, [
            'label' => $this->__('Shrink height posting second image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => '600',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModePostingSecondImage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModePostingSecondImage', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode posting second image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthPostingSecondImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting second image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => '32',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingSecondImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting second image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostingSecondImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting second image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingSecondImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting second image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostingSecondImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting second image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingSecondImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting second image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('enableShrinkingForPostingThirdImage', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for posting third image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthPostingThirdImage', IntegerType::class, [
            'label' => $this->__('Shrink width posting third image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => '800',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightPostingThirdImage', IntegerType::class, [
            'label' => $this->__('Shrink height posting third image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => '600',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModePostingThirdImage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModePostingThirdImage', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode posting third image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthPostingThirdImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting third image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => '32',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingThirdImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting third image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostingThirdImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting third image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingThirdImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting third image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthPostingThirdImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width posting third image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightPostingThirdImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height posting third image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('enableShrinkingForRankUploadImage', CheckboxType::class, [
            'label' => $this->__('Enable shrinking for rank upload image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
            ],
            'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
            'attr' => [
                'class' => 'shrink-enabler',
                'title' => $this->__('The enable shrinking option')
            ],
            'required' => false,
        ]);
        
        $builder->add('shrinkWidthRankUploadImage', IntegerType::class, [
            'label' => $this->__('Shrink width rank upload image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image width in pixels.')
            ],
            'help' => $this->__('The maximum image width in pixels.'),
            'empty_data' => '800',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink width')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('shrinkHeightRankUploadImage', IntegerType::class, [
            'label' => $this->__('Shrink height rank upload image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('The maximum image height in pixels.')
            ],
            'help' => $this->__('The maximum image height in pixels.'),
            'empty_data' => '600',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the shrink height')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'thumbnailModeRankUploadImage');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('thumbnailModeRankUploadImage', ChoiceType::class, [
            'label' => $this->__('Thumbnail mode rank upload image') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail mode (inset or outbound).')
            ],
            'help' => $this->__('Thumbnail mode (inset or outbound).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the thumbnail mode.')
            ],
            'required' => true,
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        
        $builder->add('thumbnailWidthRankUploadImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail width rank upload image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on view pages in pixels.'),
            'empty_data' => '32',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightRankUploadImageView', IntegerType::class, [
            'label' => $this->__('Thumbnail height rank upload image view') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on view pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on view pages in pixels.'),
            'empty_data' => '24',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height view')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthRankUploadImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail width rank upload image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on display pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightRankUploadImageDisplay', IntegerType::class, [
            'label' => $this->__('Thumbnail height rank upload image display') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on display pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on display pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height display')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailWidthRankUploadImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail width rank upload image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail width on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail width on edit pages in pixels.'),
            'empty_data' => '240',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail width edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
        
        $builder->add('thumbnailHeightRankUploadImageEdit', IntegerType::class, [
            'label' => $this->__('Thumbnail height rank upload image edit') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Thumbnail height on edit pages in pixels.')
            ],
            'help' => $this->__('Thumbnail height on edit pages in pixels.'),
            'empty_data' => '180',
            'attr' => [
                'maxlength' => 4,
                'class' => '',
                'title' => $this->__('Enter the thumbnail height edit')
            ],
            'required' => true,
            'scale' => 0,
            'input_group' => ['right' => $this->__('pixels')]
        ]);
    }

    /**
     * Adds fields for integration fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIntegrationFields(FormBuilderInterface $builder, array $options = [])
    {
        
        $listEntries = $this->listHelper->getEntries('appSettings', 'enabledFinderTypes');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('enabledFinderTypes', MultiListType::class, [
            'label' => $this->__('Enabled finder types') . ':',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).')
            ],
            'help' => $this->__('Which sections are supported in the Finder component (used by Scribite plug-ins).'),
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the enabled finder types.')
            ],
            'required' => false,
            'placeholder' => $this->__('Choose an option'),
            'choices' => $choices,
            'choice_attr' => $choiceAttributes,
            'multiple' => true,
            'expanded' => false
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('save', SubmitType::class, [
            'label' => $this->__('Update configuration'),
            'icon' => 'fa-check',
            'attr' => [
                'class' => 'btn btn-success'
            ]
        ]);
        $builder->add('reset', ResetType::class, [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'muboardmodule_config';
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data
                'data_class' => AppSettings::class,
            ]);
    }
}
