<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\ContentType\Form\Type\Base;

use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Content\AbstractContentFormType;
use Zikula\Common\Content\ContentTypeInterface;
use Zikula\Common\Translator\TranslatorInterface;

/**
 * List content type form type base class.
 */
abstract class AbstractItemListType extends AbstractContentFormType
{
    /**
     * ItemListType constructor.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function __construct(TranslatorInterface $translator)
    {
        $this->setTranslator($translator);
    }

    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addObjectTypeField($builder, $options);
        $this->addSortingField($builder, $options);
        $this->addAmountField($builder, $options);
        $this->addTemplateFields($builder, $options);
        $this->addFilterField($builder, $options);
    }

    /**
     * Adds an object type field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addObjectTypeField(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('objectType', ChoiceType::class, [
            'label' => $this->__('Object type', 'muboardmodule') . ':',
            'empty_data' => 'category',
            'attr' => [
                'title' => $this->__('If you change this please save the element once to reload the parameters below.', 'muboardmodule')
            ],
            'help' => $this->__('If you change this please save the element once to reload the parameters below.', 'muboardmodule'),
            'choices' => [
                $this->__('Categories', 'muboardmodule') => 'category',
                $this->__('Forums', 'muboardmodule') => 'forum',
                $this->__('Postings', 'muboardmodule') => 'posting',
                $this->__('Abos', 'muboardmodule') => 'abo',
                $this->__('Users', 'muboardmodule') => 'user',
                $this->__('Ranks', 'muboardmodule') => 'rank'
            ],
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds a sorting field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSortingField(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('sorting', ChoiceType::class, [
            'label' => $this->__('Sorting', 'muboardmodule') . ':',
            'empty_data' => 'default',
            'choices' => [
                $this->__('Random', 'muboardmodule') => 'random',
                $this->__('Newest', 'muboardmodule') => 'newest',
                $this->__('Updated', 'muboardmodule') => 'updated',
                $this->__('Default', 'muboardmodule') => 'default'
            ],
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds a page size field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addAmountField(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('amount', IntegerType::class, [
            'label' => $this->__('Amount', 'muboardmodule') . ':',
            'attr' => [
                'maxlength' => 2,
                'title' => $this->__('The maximum amount of items to be shown.', 'muboardmodule') . ' ' . $this->__('Only digits are allowed.', 'muboardmodule')
            ],
            'help' => $this->__('The maximum amount of items to be shown.', 'muboardmodule') . ' ' . $this->__('Only digits are allowed.', 'muboardmodule'),
            'empty_data' => 5,
            'scale' => 0
        ]);
    }

    /**
     * Adds template fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addTemplateFields(FormBuilderInterface $builder, array $options = [])
    {
        $builder
            ->add('template', ChoiceType::class, [
                'label' => $this->__('Template', 'muboardmodule') . ':',
                'empty_data' => 'itemlist_display.html.twig',
                'choices' => [
                    $this->__('Only item titles', 'muboardmodule') => 'itemlist_display.html.twig',
                    $this->__('With description', 'muboardmodule') => 'itemlist_display_description.html.twig',
                    $this->__('Custom template', 'muboardmodule') => 'custom'
                ],
                'multiple' => false,
                'expanded' => false
            ])
            ->add('customTemplate', TextType::class, [
                'label' => $this->__('Custom template', 'muboardmodule') . ':',
                'required' => false,
                'attr' => [
                    'maxlength' => 80,
                    'title' => $this->__('Example', 'muboardmodule') . ': itemlist_[objectType]_display.html.twig'
                ],
                'help' => $this->__('Example', 'muboardmodule') . ': <em>itemlist_[objectType]_display.html.twig</em>'
            ])
        ;
    }

    /**
     * Adds a filter field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addFilterField(FormBuilderInterface $builder, array $options = [])
    {
        $builder->add('filter', TextType::class, [
            'label' => $this->__('Filter (expert option)', 'muboardmodule') . ':',
            'required' => false,
            'attr' => [
                'maxlength' => 255,
                'title' => $this->__('Example', 'muboardmodule') . ': tbl.age >= 18'
            ],
            'help' => $this->__('Example', 'muboardmodule') . ': tbl.age >= 18'
        ]);
    }

    /**
     * @inheritDoc
     */
    public function getBlockPrefix()
    {
        return 'muboardmodule_contenttype_list';
    }

    /**
     * @inheritDoc
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                'context' => ContentTypeInterface::CONTEXT_EDIT,
                'object_type' => 'category'
            ])
            ->setRequired(['object_type'])
            ->setAllowedTypes('context', 'string')
            ->setAllowedTypes('object_type', 'string')
            ->setAllowedValues('context', [ContentTypeInterface::CONTEXT_EDIT, ContentTypeInterface::CONTEXT_TRANSLATION])
        ;
    }
}
