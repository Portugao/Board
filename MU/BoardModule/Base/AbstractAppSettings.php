<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Zikula\GroupsModule\Constant as GroupsConstant;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;
use MU\BoardModule\Validator\Constraints as BoardAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @var GroupRepositoryInterface
     */
    protected $groupRepository;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $uploadImages
     */
    protected $uploadImages = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $allowedSizeOfImages
     */
    protected $allowedSizeOfImages = '200k';
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="numberImages", multiple=false)
     * @var string $numberImages
     */
    protected $numberImages = '1';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $uploadFiles
     */
    protected $uploadFiles = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $allowedSizeOfFiles
     */
    protected $allowedSizeOfFiles = '200k';
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="numberFiles", multiple=false)
     * @var string $numberFiles
     */
    protected $numberFiles = '1';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $editPostings
     */
    protected $editPostings = false;
    
    /**
     * Time of editing allowed in hours.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $editTime
     */
    protected $editTime = 6;
    
    /**
     * In Hours.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $latestPostings
     */
    protected $latestPostings = 24;
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="sortingCategories", multiple=false)
     * @var string $sortingCategories
     */
    protected $sortingCategories = 'descending';
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="sortingForums", multiple=false)
     * @var string $sortingForums
     */
    protected $sortingForums = 'descending';
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="sortingPostings", multiple=false)
     * @var string $sortingPostings
     */
    protected $sortingPostings = 'descending';
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $standardIcon
     */
    protected $standardIcon = '';
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $specialIcon
     */
    protected $specialIcon = '';
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="iconSet", multiple=false)
     * @var string $iconSet
     */
    protected $iconSet = '1';
    
    /**
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="template", multiple=false)
     * @var string $template
     */
    protected $template = 'normal';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showStatisticInDetails
     */
    protected $showStatisticInDetails = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showStatisticOnBottom
     */
    protected $showStatisticOnBottom = false;
    
    /**
     * Used to determine moderator user accounts for sending email notifications.
     *
     * @Assert\NotBlank()
     * @var integer $moderationGroupForPostings
     */
    protected $moderationGroupForPostings = 2;
    
    /**
     * The amount of categories shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $categoryEntriesPerPage
     */
    protected $categoryEntriesPerPage = 10;
    
    /**
     * Whether to add a link to categories of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnCategoriesOnAccountPage
     */
    protected $linkOwnCategoriesOnAccountPage = true;
    
    /**
     * The amount of forums shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $forumEntriesPerPage
     */
    protected $forumEntriesPerPage = 10;
    
    /**
     * Whether to add a link to forums of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnForumsOnAccountPage
     */
    protected $linkOwnForumsOnAccountPage = true;
    
    /**
     * The amount of postings shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $postingEntriesPerPage
     */
    protected $postingEntriesPerPage = 10;
    
    /**
     * Whether to add a link to postings of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnPostingsOnAccountPage
     */
    protected $linkOwnPostingsOnAccountPage = true;
    
    /**
     * The amount of abos shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $aboEntriesPerPage
     */
    protected $aboEntriesPerPage = 10;
    
    /**
     * Whether to add a link to abos of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnAbosOnAccountPage
     */
    protected $linkOwnAbosOnAccountPage = true;
    
    /**
     * The amount of users shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $userEntriesPerPage
     */
    protected $userEntriesPerPage = 10;
    
    /**
     * The amount of ranks shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $rankEntriesPerPage
     */
    protected $rankEntriesPerPage = 10;
    
    /**
     * Whether to add a link to ranks of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnRanksOnAccountPage
     */
    protected $linkOwnRanksOnAccountPage = true;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForPostingFirstImage
     */
    protected $enableShrinkingForPostingFirstImage = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthPostingFirstImage
     */
    protected $shrinkWidthPostingFirstImage = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightPostingFirstImage
     */
    protected $shrinkHeightPostingFirstImage = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModePostingFirstImage", multiple=false)
     * @var string $thumbnailModePostingFirstImage
     */
    protected $thumbnailModePostingFirstImage = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingFirstImageView
     */
    protected $thumbnailWidthPostingFirstImageView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingFirstImageView
     */
    protected $thumbnailHeightPostingFirstImageView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingFirstImageDisplay
     */
    protected $thumbnailWidthPostingFirstImageDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingFirstImageDisplay
     */
    protected $thumbnailHeightPostingFirstImageDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingFirstImageEdit
     */
    protected $thumbnailWidthPostingFirstImageEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingFirstImageEdit
     */
    protected $thumbnailHeightPostingFirstImageEdit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForPostingSecondImage
     */
    protected $enableShrinkingForPostingSecondImage = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthPostingSecondImage
     */
    protected $shrinkWidthPostingSecondImage = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightPostingSecondImage
     */
    protected $shrinkHeightPostingSecondImage = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModePostingSecondImage", multiple=false)
     * @var string $thumbnailModePostingSecondImage
     */
    protected $thumbnailModePostingSecondImage = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingSecondImageView
     */
    protected $thumbnailWidthPostingSecondImageView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingSecondImageView
     */
    protected $thumbnailHeightPostingSecondImageView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingSecondImageDisplay
     */
    protected $thumbnailWidthPostingSecondImageDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingSecondImageDisplay
     */
    protected $thumbnailHeightPostingSecondImageDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingSecondImageEdit
     */
    protected $thumbnailWidthPostingSecondImageEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingSecondImageEdit
     */
    protected $thumbnailHeightPostingSecondImageEdit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForPostingThirdImage
     */
    protected $enableShrinkingForPostingThirdImage = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthPostingThirdImage
     */
    protected $shrinkWidthPostingThirdImage = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightPostingThirdImage
     */
    protected $shrinkHeightPostingThirdImage = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModePostingThirdImage", multiple=false)
     * @var string $thumbnailModePostingThirdImage
     */
    protected $thumbnailModePostingThirdImage = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingThirdImageView
     */
    protected $thumbnailWidthPostingThirdImageView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingThirdImageView
     */
    protected $thumbnailHeightPostingThirdImageView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingThirdImageDisplay
     */
    protected $thumbnailWidthPostingThirdImageDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingThirdImageDisplay
     */
    protected $thumbnailHeightPostingThirdImageDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPostingThirdImageEdit
     */
    protected $thumbnailWidthPostingThirdImageEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPostingThirdImageEdit
     */
    protected $thumbnailHeightPostingThirdImageEdit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForRankUploadImage
     */
    protected $enableShrinkingForRankUploadImage = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthRankUploadImage
     */
    protected $shrinkWidthRankUploadImage = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightRankUploadImage
     */
    protected $shrinkHeightRankUploadImage = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeRankUploadImage", multiple=false)
     * @var string $thumbnailModeRankUploadImage
     */
    protected $thumbnailModeRankUploadImage = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthRankUploadImageView
     */
    protected $thumbnailWidthRankUploadImageView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightRankUploadImageView
     */
    protected $thumbnailHeightRankUploadImageView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthRankUploadImageDisplay
     */
    protected $thumbnailWidthRankUploadImageDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightRankUploadImageDisplay
     */
    protected $thumbnailHeightRankUploadImageDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthRankUploadImageEdit
     */
    protected $thumbnailWidthRankUploadImageEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightRankUploadImageEdit
     */
    protected $thumbnailHeightRankUploadImageEdit = 180;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @BoardAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'category###forum###posting###abo###user###rank';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(
        VariableApiInterface $variableApi,
        GroupRepositoryInterface $groupRepository
    ) {
        $this->variableApi = $variableApi;
        $this->groupRepository = $groupRepository;
    
        $this->load();
    }
    
    /**
     * Returns the upload images.
     *
     * @return boolean
     */
    public function getUploadImages()
    {
        return $this->uploadImages;
    }
    
    /**
     * Sets the upload images.
     *
     * @param boolean $uploadImages
     *
     * @return void
     */
    public function setUploadImages($uploadImages)
    {
        if (boolval($this->uploadImages) !== boolval($uploadImages)) {
            $this->uploadImages = boolval($uploadImages);
        }
    }
    
    /**
     * Returns the allowed size of images.
     *
     * @return string
     */
    public function getAllowedSizeOfImages()
    {
        return $this->allowedSizeOfImages;
    }
    
    /**
     * Sets the allowed size of images.
     *
     * @param string $allowedSizeOfImages
     *
     * @return void
     */
    public function setAllowedSizeOfImages($allowedSizeOfImages)
    {
        if ($this->allowedSizeOfImages !== $allowedSizeOfImages) {
            $this->allowedSizeOfImages = isset($allowedSizeOfImages) ? $allowedSizeOfImages : '';
        }
    }
    
    /**
     * Returns the number images.
     *
     * @return string
     */
    public function getNumberImages()
    {
        return $this->numberImages;
    }
    
    /**
     * Sets the number images.
     *
     * @param string $numberImages
     *
     * @return void
     */
    public function setNumberImages($numberImages)
    {
        if ($this->numberImages !== $numberImages) {
            $this->numberImages = isset($numberImages) ? $numberImages : '';
        }
    }
    
    /**
     * Returns the upload files.
     *
     * @return boolean
     */
    public function getUploadFiles()
    {
        return $this->uploadFiles;
    }
    
    /**
     * Sets the upload files.
     *
     * @param boolean $uploadFiles
     *
     * @return void
     */
    public function setUploadFiles($uploadFiles)
    {
        if (boolval($this->uploadFiles) !== boolval($uploadFiles)) {
            $this->uploadFiles = boolval($uploadFiles);
        }
    }
    
    /**
     * Returns the allowed size of files.
     *
     * @return string
     */
    public function getAllowedSizeOfFiles()
    {
        return $this->allowedSizeOfFiles;
    }
    
    /**
     * Sets the allowed size of files.
     *
     * @param string $allowedSizeOfFiles
     *
     * @return void
     */
    public function setAllowedSizeOfFiles($allowedSizeOfFiles)
    {
        if ($this->allowedSizeOfFiles !== $allowedSizeOfFiles) {
            $this->allowedSizeOfFiles = isset($allowedSizeOfFiles) ? $allowedSizeOfFiles : '';
        }
    }
    
    /**
     * Returns the number files.
     *
     * @return string
     */
    public function getNumberFiles()
    {
        return $this->numberFiles;
    }
    
    /**
     * Sets the number files.
     *
     * @param string $numberFiles
     *
     * @return void
     */
    public function setNumberFiles($numberFiles)
    {
        if ($this->numberFiles !== $numberFiles) {
            $this->numberFiles = isset($numberFiles) ? $numberFiles : '';
        }
    }
    
    /**
     * Returns the edit postings.
     *
     * @return boolean
     */
    public function getEditPostings()
    {
        return $this->editPostings;
    }
    
    /**
     * Sets the edit postings.
     *
     * @param boolean $editPostings
     *
     * @return void
     */
    public function setEditPostings($editPostings)
    {
        if (boolval($this->editPostings) !== boolval($editPostings)) {
            $this->editPostings = boolval($editPostings);
        }
    }
    
    /**
     * Returns the edit time.
     *
     * @return integer
     */
    public function getEditTime()
    {
        return $this->editTime;
    }
    
    /**
     * Sets the edit time.
     *
     * @param integer $editTime
     *
     * @return void
     */
    public function setEditTime($editTime)
    {
        if (intval($this->editTime) !== intval($editTime)) {
            $this->editTime = intval($editTime);
        }
    }
    
    /**
     * Returns the latest postings.
     *
     * @return integer
     */
    public function getLatestPostings()
    {
        return $this->latestPostings;
    }
    
    /**
     * Sets the latest postings.
     *
     * @param integer $latestPostings
     *
     * @return void
     */
    public function setLatestPostings($latestPostings)
    {
        if (intval($this->latestPostings) !== intval($latestPostings)) {
            $this->latestPostings = intval($latestPostings);
        }
    }
    
    /**
     * Returns the sorting categories.
     *
     * @return string
     */
    public function getSortingCategories()
    {
        return $this->sortingCategories;
    }
    
    /**
     * Sets the sorting categories.
     *
     * @param string $sortingCategories
     *
     * @return void
     */
    public function setSortingCategories($sortingCategories)
    {
        if ($this->sortingCategories !== $sortingCategories) {
            $this->sortingCategories = isset($sortingCategories) ? $sortingCategories : '';
        }
    }
    
    /**
     * Returns the sorting forums.
     *
     * @return string
     */
    public function getSortingForums()
    {
        return $this->sortingForums;
    }
    
    /**
     * Sets the sorting forums.
     *
     * @param string $sortingForums
     *
     * @return void
     */
    public function setSortingForums($sortingForums)
    {
        if ($this->sortingForums !== $sortingForums) {
            $this->sortingForums = isset($sortingForums) ? $sortingForums : '';
        }
    }
    
    /**
     * Returns the sorting postings.
     *
     * @return string
     */
    public function getSortingPostings()
    {
        return $this->sortingPostings;
    }
    
    /**
     * Sets the sorting postings.
     *
     * @param string $sortingPostings
     *
     * @return void
     */
    public function setSortingPostings($sortingPostings)
    {
        if ($this->sortingPostings !== $sortingPostings) {
            $this->sortingPostings = isset($sortingPostings) ? $sortingPostings : '';
        }
    }
    
    /**
     * Returns the standard icon.
     *
     * @return string
     */
    public function getStandardIcon()
    {
        return $this->standardIcon;
    }
    
    /**
     * Sets the standard icon.
     *
     * @param string $standardIcon
     *
     * @return void
     */
    public function setStandardIcon($standardIcon)
    {
        if ($this->standardIcon !== $standardIcon) {
            $this->standardIcon = isset($standardIcon) ? $standardIcon : '';
        }
    }
    
    /**
     * Returns the special icon.
     *
     * @return string
     */
    public function getSpecialIcon()
    {
        return $this->specialIcon;
    }
    
    /**
     * Sets the special icon.
     *
     * @param string $specialIcon
     *
     * @return void
     */
    public function setSpecialIcon($specialIcon)
    {
        if ($this->specialIcon !== $specialIcon) {
            $this->specialIcon = isset($specialIcon) ? $specialIcon : '';
        }
    }
    
    /**
     * Returns the icon set.
     *
     * @return string
     */
    public function getIconSet()
    {
        return $this->iconSet;
    }
    
    /**
     * Sets the icon set.
     *
     * @param string $iconSet
     *
     * @return void
     */
    public function setIconSet($iconSet)
    {
        if ($this->iconSet !== $iconSet) {
            $this->iconSet = isset($iconSet) ? $iconSet : '';
        }
    }
    
    /**
     * Returns the template.
     *
     * @return string
     */
    public function getTemplate()
    {
        return $this->template;
    }
    
    /**
     * Sets the template.
     *
     * @param string $template
     *
     * @return void
     */
    public function setTemplate($template)
    {
        if ($this->template !== $template) {
            $this->template = isset($template) ? $template : '';
        }
    }
    
    /**
     * Returns the show statistic in details.
     *
     * @return boolean
     */
    public function getShowStatisticInDetails()
    {
        return $this->showStatisticInDetails;
    }
    
    /**
     * Sets the show statistic in details.
     *
     * @param boolean $showStatisticInDetails
     *
     * @return void
     */
    public function setShowStatisticInDetails($showStatisticInDetails)
    {
        if (boolval($this->showStatisticInDetails) !== boolval($showStatisticInDetails)) {
            $this->showStatisticInDetails = boolval($showStatisticInDetails);
        }
    }
    
    /**
     * Returns the show statistic on bottom.
     *
     * @return boolean
     */
    public function getShowStatisticOnBottom()
    {
        return $this->showStatisticOnBottom;
    }
    
    /**
     * Sets the show statistic on bottom.
     *
     * @param boolean $showStatisticOnBottom
     *
     * @return void
     */
    public function setShowStatisticOnBottom($showStatisticOnBottom)
    {
        if (boolval($this->showStatisticOnBottom) !== boolval($showStatisticOnBottom)) {
            $this->showStatisticOnBottom = boolval($showStatisticOnBottom);
        }
    }
    
    /**
     * Returns the moderation group for postings.
     *
     * @return integer
     */
    public function getModerationGroupForPostings()
    {
        return $this->moderationGroupForPostings;
    }
    
    /**
     * Sets the moderation group for postings.
     *
     * @param integer $moderationGroupForPostings
     *
     * @return void
     */
    public function setModerationGroupForPostings($moderationGroupForPostings)
    {
        if ($this->moderationGroupForPostings !== $moderationGroupForPostings) {
            $this->moderationGroupForPostings = $moderationGroupForPostings;
        }
    }
    
    /**
     * Returns the category entries per page.
     *
     * @return integer
     */
    public function getCategoryEntriesPerPage()
    {
        return $this->categoryEntriesPerPage;
    }
    
    /**
     * Sets the category entries per page.
     *
     * @param integer $categoryEntriesPerPage
     *
     * @return void
     */
    public function setCategoryEntriesPerPage($categoryEntriesPerPage)
    {
        if (intval($this->categoryEntriesPerPage) !== intval($categoryEntriesPerPage)) {
            $this->categoryEntriesPerPage = intval($categoryEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own categories on account page.
     *
     * @return boolean
     */
    public function getLinkOwnCategoriesOnAccountPage()
    {
        return $this->linkOwnCategoriesOnAccountPage;
    }
    
    /**
     * Sets the link own categories on account page.
     *
     * @param boolean $linkOwnCategoriesOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnCategoriesOnAccountPage($linkOwnCategoriesOnAccountPage)
    {
        if (boolval($this->linkOwnCategoriesOnAccountPage) !== boolval($linkOwnCategoriesOnAccountPage)) {
            $this->linkOwnCategoriesOnAccountPage = boolval($linkOwnCategoriesOnAccountPage);
        }
    }
    
    /**
     * Returns the forum entries per page.
     *
     * @return integer
     */
    public function getForumEntriesPerPage()
    {
        return $this->forumEntriesPerPage;
    }
    
    /**
     * Sets the forum entries per page.
     *
     * @param integer $forumEntriesPerPage
     *
     * @return void
     */
    public function setForumEntriesPerPage($forumEntriesPerPage)
    {
        if (intval($this->forumEntriesPerPage) !== intval($forumEntriesPerPage)) {
            $this->forumEntriesPerPage = intval($forumEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own forums on account page.
     *
     * @return boolean
     */
    public function getLinkOwnForumsOnAccountPage()
    {
        return $this->linkOwnForumsOnAccountPage;
    }
    
    /**
     * Sets the link own forums on account page.
     *
     * @param boolean $linkOwnForumsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnForumsOnAccountPage($linkOwnForumsOnAccountPage)
    {
        if (boolval($this->linkOwnForumsOnAccountPage) !== boolval($linkOwnForumsOnAccountPage)) {
            $this->linkOwnForumsOnAccountPage = boolval($linkOwnForumsOnAccountPage);
        }
    }
    
    /**
     * Returns the posting entries per page.
     *
     * @return integer
     */
    public function getPostingEntriesPerPage()
    {
        return $this->postingEntriesPerPage;
    }
    
    /**
     * Sets the posting entries per page.
     *
     * @param integer $postingEntriesPerPage
     *
     * @return void
     */
    public function setPostingEntriesPerPage($postingEntriesPerPage)
    {
        if (intval($this->postingEntriesPerPage) !== intval($postingEntriesPerPage)) {
            $this->postingEntriesPerPage = intval($postingEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own postings on account page.
     *
     * @return boolean
     */
    public function getLinkOwnPostingsOnAccountPage()
    {
        return $this->linkOwnPostingsOnAccountPage;
    }
    
    /**
     * Sets the link own postings on account page.
     *
     * @param boolean $linkOwnPostingsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnPostingsOnAccountPage($linkOwnPostingsOnAccountPage)
    {
        if (boolval($this->linkOwnPostingsOnAccountPage) !== boolval($linkOwnPostingsOnAccountPage)) {
            $this->linkOwnPostingsOnAccountPage = boolval($linkOwnPostingsOnAccountPage);
        }
    }
    
    /**
     * Returns the abo entries per page.
     *
     * @return integer
     */
    public function getAboEntriesPerPage()
    {
        return $this->aboEntriesPerPage;
    }
    
    /**
     * Sets the abo entries per page.
     *
     * @param integer $aboEntriesPerPage
     *
     * @return void
     */
    public function setAboEntriesPerPage($aboEntriesPerPage)
    {
        if (intval($this->aboEntriesPerPage) !== intval($aboEntriesPerPage)) {
            $this->aboEntriesPerPage = intval($aboEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own abos on account page.
     *
     * @return boolean
     */
    public function getLinkOwnAbosOnAccountPage()
    {
        return $this->linkOwnAbosOnAccountPage;
    }
    
    /**
     * Sets the link own abos on account page.
     *
     * @param boolean $linkOwnAbosOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnAbosOnAccountPage($linkOwnAbosOnAccountPage)
    {
        if (boolval($this->linkOwnAbosOnAccountPage) !== boolval($linkOwnAbosOnAccountPage)) {
            $this->linkOwnAbosOnAccountPage = boolval($linkOwnAbosOnAccountPage);
        }
    }
    
    /**
     * Returns the user entries per page.
     *
     * @return integer
     */
    public function getUserEntriesPerPage()
    {
        return $this->userEntriesPerPage;
    }
    
    /**
     * Sets the user entries per page.
     *
     * @param integer $userEntriesPerPage
     *
     * @return void
     */
    public function setUserEntriesPerPage($userEntriesPerPage)
    {
        if (intval($this->userEntriesPerPage) !== intval($userEntriesPerPage)) {
            $this->userEntriesPerPage = intval($userEntriesPerPage);
        }
    }
    
    /**
     * Returns the rank entries per page.
     *
     * @return integer
     */
    public function getRankEntriesPerPage()
    {
        return $this->rankEntriesPerPage;
    }
    
    /**
     * Sets the rank entries per page.
     *
     * @param integer $rankEntriesPerPage
     *
     * @return void
     */
    public function setRankEntriesPerPage($rankEntriesPerPage)
    {
        if (intval($this->rankEntriesPerPage) !== intval($rankEntriesPerPage)) {
            $this->rankEntriesPerPage = intval($rankEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own ranks on account page.
     *
     * @return boolean
     */
    public function getLinkOwnRanksOnAccountPage()
    {
        return $this->linkOwnRanksOnAccountPage;
    }
    
    /**
     * Sets the link own ranks on account page.
     *
     * @param boolean $linkOwnRanksOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnRanksOnAccountPage($linkOwnRanksOnAccountPage)
    {
        if (boolval($this->linkOwnRanksOnAccountPage) !== boolval($linkOwnRanksOnAccountPage)) {
            $this->linkOwnRanksOnAccountPage = boolval($linkOwnRanksOnAccountPage);
        }
    }
    
    /**
     * Returns the enable shrinking for posting first image.
     *
     * @return boolean
     */
    public function getEnableShrinkingForPostingFirstImage()
    {
        return $this->enableShrinkingForPostingFirstImage;
    }
    
    /**
     * Sets the enable shrinking for posting first image.
     *
     * @param boolean $enableShrinkingForPostingFirstImage
     *
     * @return void
     */
    public function setEnableShrinkingForPostingFirstImage($enableShrinkingForPostingFirstImage)
    {
        if (boolval($this->enableShrinkingForPostingFirstImage) !== boolval($enableShrinkingForPostingFirstImage)) {
            $this->enableShrinkingForPostingFirstImage = boolval($enableShrinkingForPostingFirstImage);
        }
    }
    
    /**
     * Returns the shrink width posting first image.
     *
     * @return integer
     */
    public function getShrinkWidthPostingFirstImage()
    {
        return $this->shrinkWidthPostingFirstImage;
    }
    
    /**
     * Sets the shrink width posting first image.
     *
     * @param integer $shrinkWidthPostingFirstImage
     *
     * @return void
     */
    public function setShrinkWidthPostingFirstImage($shrinkWidthPostingFirstImage)
    {
        if (intval($this->shrinkWidthPostingFirstImage) !== intval($shrinkWidthPostingFirstImage)) {
            $this->shrinkWidthPostingFirstImage = intval($shrinkWidthPostingFirstImage);
        }
    }
    
    /**
     * Returns the shrink height posting first image.
     *
     * @return integer
     */
    public function getShrinkHeightPostingFirstImage()
    {
        return $this->shrinkHeightPostingFirstImage;
    }
    
    /**
     * Sets the shrink height posting first image.
     *
     * @param integer $shrinkHeightPostingFirstImage
     *
     * @return void
     */
    public function setShrinkHeightPostingFirstImage($shrinkHeightPostingFirstImage)
    {
        if (intval($this->shrinkHeightPostingFirstImage) !== intval($shrinkHeightPostingFirstImage)) {
            $this->shrinkHeightPostingFirstImage = intval($shrinkHeightPostingFirstImage);
        }
    }
    
    /**
     * Returns the thumbnail mode posting first image.
     *
     * @return string
     */
    public function getThumbnailModePostingFirstImage()
    {
        return $this->thumbnailModePostingFirstImage;
    }
    
    /**
     * Sets the thumbnail mode posting first image.
     *
     * @param string $thumbnailModePostingFirstImage
     *
     * @return void
     */
    public function setThumbnailModePostingFirstImage($thumbnailModePostingFirstImage)
    {
        if ($this->thumbnailModePostingFirstImage !== $thumbnailModePostingFirstImage) {
            $this->thumbnailModePostingFirstImage = isset($thumbnailModePostingFirstImage) ? $thumbnailModePostingFirstImage : '';
        }
    }
    
    /**
     * Returns the thumbnail width posting first image view.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingFirstImageView()
    {
        return $this->thumbnailWidthPostingFirstImageView;
    }
    
    /**
     * Sets the thumbnail width posting first image view.
     *
     * @param integer $thumbnailWidthPostingFirstImageView
     *
     * @return void
     */
    public function setThumbnailWidthPostingFirstImageView($thumbnailWidthPostingFirstImageView)
    {
        if (intval($this->thumbnailWidthPostingFirstImageView) !== intval($thumbnailWidthPostingFirstImageView)) {
            $this->thumbnailWidthPostingFirstImageView = intval($thumbnailWidthPostingFirstImageView);
        }
    }
    
    /**
     * Returns the thumbnail height posting first image view.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingFirstImageView()
    {
        return $this->thumbnailHeightPostingFirstImageView;
    }
    
    /**
     * Sets the thumbnail height posting first image view.
     *
     * @param integer $thumbnailHeightPostingFirstImageView
     *
     * @return void
     */
    public function setThumbnailHeightPostingFirstImageView($thumbnailHeightPostingFirstImageView)
    {
        if (intval($this->thumbnailHeightPostingFirstImageView) !== intval($thumbnailHeightPostingFirstImageView)) {
            $this->thumbnailHeightPostingFirstImageView = intval($thumbnailHeightPostingFirstImageView);
        }
    }
    
    /**
     * Returns the thumbnail width posting first image display.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingFirstImageDisplay()
    {
        return $this->thumbnailWidthPostingFirstImageDisplay;
    }
    
    /**
     * Sets the thumbnail width posting first image display.
     *
     * @param integer $thumbnailWidthPostingFirstImageDisplay
     *
     * @return void
     */
    public function setThumbnailWidthPostingFirstImageDisplay($thumbnailWidthPostingFirstImageDisplay)
    {
        if (intval($this->thumbnailWidthPostingFirstImageDisplay) !== intval($thumbnailWidthPostingFirstImageDisplay)) {
            $this->thumbnailWidthPostingFirstImageDisplay = intval($thumbnailWidthPostingFirstImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height posting first image display.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingFirstImageDisplay()
    {
        return $this->thumbnailHeightPostingFirstImageDisplay;
    }
    
    /**
     * Sets the thumbnail height posting first image display.
     *
     * @param integer $thumbnailHeightPostingFirstImageDisplay
     *
     * @return void
     */
    public function setThumbnailHeightPostingFirstImageDisplay($thumbnailHeightPostingFirstImageDisplay)
    {
        if (intval($this->thumbnailHeightPostingFirstImageDisplay) !== intval($thumbnailHeightPostingFirstImageDisplay)) {
            $this->thumbnailHeightPostingFirstImageDisplay = intval($thumbnailHeightPostingFirstImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width posting first image edit.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingFirstImageEdit()
    {
        return $this->thumbnailWidthPostingFirstImageEdit;
    }
    
    /**
     * Sets the thumbnail width posting first image edit.
     *
     * @param integer $thumbnailWidthPostingFirstImageEdit
     *
     * @return void
     */
    public function setThumbnailWidthPostingFirstImageEdit($thumbnailWidthPostingFirstImageEdit)
    {
        if (intval($this->thumbnailWidthPostingFirstImageEdit) !== intval($thumbnailWidthPostingFirstImageEdit)) {
            $this->thumbnailWidthPostingFirstImageEdit = intval($thumbnailWidthPostingFirstImageEdit);
        }
    }
    
    /**
     * Returns the thumbnail height posting first image edit.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingFirstImageEdit()
    {
        return $this->thumbnailHeightPostingFirstImageEdit;
    }
    
    /**
     * Sets the thumbnail height posting first image edit.
     *
     * @param integer $thumbnailHeightPostingFirstImageEdit
     *
     * @return void
     */
    public function setThumbnailHeightPostingFirstImageEdit($thumbnailHeightPostingFirstImageEdit)
    {
        if (intval($this->thumbnailHeightPostingFirstImageEdit) !== intval($thumbnailHeightPostingFirstImageEdit)) {
            $this->thumbnailHeightPostingFirstImageEdit = intval($thumbnailHeightPostingFirstImageEdit);
        }
    }
    
    /**
     * Returns the enable shrinking for posting second image.
     *
     * @return boolean
     */
    public function getEnableShrinkingForPostingSecondImage()
    {
        return $this->enableShrinkingForPostingSecondImage;
    }
    
    /**
     * Sets the enable shrinking for posting second image.
     *
     * @param boolean $enableShrinkingForPostingSecondImage
     *
     * @return void
     */
    public function setEnableShrinkingForPostingSecondImage($enableShrinkingForPostingSecondImage)
    {
        if (boolval($this->enableShrinkingForPostingSecondImage) !== boolval($enableShrinkingForPostingSecondImage)) {
            $this->enableShrinkingForPostingSecondImage = boolval($enableShrinkingForPostingSecondImage);
        }
    }
    
    /**
     * Returns the shrink width posting second image.
     *
     * @return integer
     */
    public function getShrinkWidthPostingSecondImage()
    {
        return $this->shrinkWidthPostingSecondImage;
    }
    
    /**
     * Sets the shrink width posting second image.
     *
     * @param integer $shrinkWidthPostingSecondImage
     *
     * @return void
     */
    public function setShrinkWidthPostingSecondImage($shrinkWidthPostingSecondImage)
    {
        if (intval($this->shrinkWidthPostingSecondImage) !== intval($shrinkWidthPostingSecondImage)) {
            $this->shrinkWidthPostingSecondImage = intval($shrinkWidthPostingSecondImage);
        }
    }
    
    /**
     * Returns the shrink height posting second image.
     *
     * @return integer
     */
    public function getShrinkHeightPostingSecondImage()
    {
        return $this->shrinkHeightPostingSecondImage;
    }
    
    /**
     * Sets the shrink height posting second image.
     *
     * @param integer $shrinkHeightPostingSecondImage
     *
     * @return void
     */
    public function setShrinkHeightPostingSecondImage($shrinkHeightPostingSecondImage)
    {
        if (intval($this->shrinkHeightPostingSecondImage) !== intval($shrinkHeightPostingSecondImage)) {
            $this->shrinkHeightPostingSecondImage = intval($shrinkHeightPostingSecondImage);
        }
    }
    
    /**
     * Returns the thumbnail mode posting second image.
     *
     * @return string
     */
    public function getThumbnailModePostingSecondImage()
    {
        return $this->thumbnailModePostingSecondImage;
    }
    
    /**
     * Sets the thumbnail mode posting second image.
     *
     * @param string $thumbnailModePostingSecondImage
     *
     * @return void
     */
    public function setThumbnailModePostingSecondImage($thumbnailModePostingSecondImage)
    {
        if ($this->thumbnailModePostingSecondImage !== $thumbnailModePostingSecondImage) {
            $this->thumbnailModePostingSecondImage = isset($thumbnailModePostingSecondImage) ? $thumbnailModePostingSecondImage : '';
        }
    }
    
    /**
     * Returns the thumbnail width posting second image view.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingSecondImageView()
    {
        return $this->thumbnailWidthPostingSecondImageView;
    }
    
    /**
     * Sets the thumbnail width posting second image view.
     *
     * @param integer $thumbnailWidthPostingSecondImageView
     *
     * @return void
     */
    public function setThumbnailWidthPostingSecondImageView($thumbnailWidthPostingSecondImageView)
    {
        if (intval($this->thumbnailWidthPostingSecondImageView) !== intval($thumbnailWidthPostingSecondImageView)) {
            $this->thumbnailWidthPostingSecondImageView = intval($thumbnailWidthPostingSecondImageView);
        }
    }
    
    /**
     * Returns the thumbnail height posting second image view.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingSecondImageView()
    {
        return $this->thumbnailHeightPostingSecondImageView;
    }
    
    /**
     * Sets the thumbnail height posting second image view.
     *
     * @param integer $thumbnailHeightPostingSecondImageView
     *
     * @return void
     */
    public function setThumbnailHeightPostingSecondImageView($thumbnailHeightPostingSecondImageView)
    {
        if (intval($this->thumbnailHeightPostingSecondImageView) !== intval($thumbnailHeightPostingSecondImageView)) {
            $this->thumbnailHeightPostingSecondImageView = intval($thumbnailHeightPostingSecondImageView);
        }
    }
    
    /**
     * Returns the thumbnail width posting second image display.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingSecondImageDisplay()
    {
        return $this->thumbnailWidthPostingSecondImageDisplay;
    }
    
    /**
     * Sets the thumbnail width posting second image display.
     *
     * @param integer $thumbnailWidthPostingSecondImageDisplay
     *
     * @return void
     */
    public function setThumbnailWidthPostingSecondImageDisplay($thumbnailWidthPostingSecondImageDisplay)
    {
        if (intval($this->thumbnailWidthPostingSecondImageDisplay) !== intval($thumbnailWidthPostingSecondImageDisplay)) {
            $this->thumbnailWidthPostingSecondImageDisplay = intval($thumbnailWidthPostingSecondImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height posting second image display.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingSecondImageDisplay()
    {
        return $this->thumbnailHeightPostingSecondImageDisplay;
    }
    
    /**
     * Sets the thumbnail height posting second image display.
     *
     * @param integer $thumbnailHeightPostingSecondImageDisplay
     *
     * @return void
     */
    public function setThumbnailHeightPostingSecondImageDisplay($thumbnailHeightPostingSecondImageDisplay)
    {
        if (intval($this->thumbnailHeightPostingSecondImageDisplay) !== intval($thumbnailHeightPostingSecondImageDisplay)) {
            $this->thumbnailHeightPostingSecondImageDisplay = intval($thumbnailHeightPostingSecondImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width posting second image edit.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingSecondImageEdit()
    {
        return $this->thumbnailWidthPostingSecondImageEdit;
    }
    
    /**
     * Sets the thumbnail width posting second image edit.
     *
     * @param integer $thumbnailWidthPostingSecondImageEdit
     *
     * @return void
     */
    public function setThumbnailWidthPostingSecondImageEdit($thumbnailWidthPostingSecondImageEdit)
    {
        if (intval($this->thumbnailWidthPostingSecondImageEdit) !== intval($thumbnailWidthPostingSecondImageEdit)) {
            $this->thumbnailWidthPostingSecondImageEdit = intval($thumbnailWidthPostingSecondImageEdit);
        }
    }
    
    /**
     * Returns the thumbnail height posting second image edit.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingSecondImageEdit()
    {
        return $this->thumbnailHeightPostingSecondImageEdit;
    }
    
    /**
     * Sets the thumbnail height posting second image edit.
     *
     * @param integer $thumbnailHeightPostingSecondImageEdit
     *
     * @return void
     */
    public function setThumbnailHeightPostingSecondImageEdit($thumbnailHeightPostingSecondImageEdit)
    {
        if (intval($this->thumbnailHeightPostingSecondImageEdit) !== intval($thumbnailHeightPostingSecondImageEdit)) {
            $this->thumbnailHeightPostingSecondImageEdit = intval($thumbnailHeightPostingSecondImageEdit);
        }
    }
    
    /**
     * Returns the enable shrinking for posting third image.
     *
     * @return boolean
     */
    public function getEnableShrinkingForPostingThirdImage()
    {
        return $this->enableShrinkingForPostingThirdImage;
    }
    
    /**
     * Sets the enable shrinking for posting third image.
     *
     * @param boolean $enableShrinkingForPostingThirdImage
     *
     * @return void
     */
    public function setEnableShrinkingForPostingThirdImage($enableShrinkingForPostingThirdImage)
    {
        if (boolval($this->enableShrinkingForPostingThirdImage) !== boolval($enableShrinkingForPostingThirdImage)) {
            $this->enableShrinkingForPostingThirdImage = boolval($enableShrinkingForPostingThirdImage);
        }
    }
    
    /**
     * Returns the shrink width posting third image.
     *
     * @return integer
     */
    public function getShrinkWidthPostingThirdImage()
    {
        return $this->shrinkWidthPostingThirdImage;
    }
    
    /**
     * Sets the shrink width posting third image.
     *
     * @param integer $shrinkWidthPostingThirdImage
     *
     * @return void
     */
    public function setShrinkWidthPostingThirdImage($shrinkWidthPostingThirdImage)
    {
        if (intval($this->shrinkWidthPostingThirdImage) !== intval($shrinkWidthPostingThirdImage)) {
            $this->shrinkWidthPostingThirdImage = intval($shrinkWidthPostingThirdImage);
        }
    }
    
    /**
     * Returns the shrink height posting third image.
     *
     * @return integer
     */
    public function getShrinkHeightPostingThirdImage()
    {
        return $this->shrinkHeightPostingThirdImage;
    }
    
    /**
     * Sets the shrink height posting third image.
     *
     * @param integer $shrinkHeightPostingThirdImage
     *
     * @return void
     */
    public function setShrinkHeightPostingThirdImage($shrinkHeightPostingThirdImage)
    {
        if (intval($this->shrinkHeightPostingThirdImage) !== intval($shrinkHeightPostingThirdImage)) {
            $this->shrinkHeightPostingThirdImage = intval($shrinkHeightPostingThirdImage);
        }
    }
    
    /**
     * Returns the thumbnail mode posting third image.
     *
     * @return string
     */
    public function getThumbnailModePostingThirdImage()
    {
        return $this->thumbnailModePostingThirdImage;
    }
    
    /**
     * Sets the thumbnail mode posting third image.
     *
     * @param string $thumbnailModePostingThirdImage
     *
     * @return void
     */
    public function setThumbnailModePostingThirdImage($thumbnailModePostingThirdImage)
    {
        if ($this->thumbnailModePostingThirdImage !== $thumbnailModePostingThirdImage) {
            $this->thumbnailModePostingThirdImage = isset($thumbnailModePostingThirdImage) ? $thumbnailModePostingThirdImage : '';
        }
    }
    
    /**
     * Returns the thumbnail width posting third image view.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingThirdImageView()
    {
        return $this->thumbnailWidthPostingThirdImageView;
    }
    
    /**
     * Sets the thumbnail width posting third image view.
     *
     * @param integer $thumbnailWidthPostingThirdImageView
     *
     * @return void
     */
    public function setThumbnailWidthPostingThirdImageView($thumbnailWidthPostingThirdImageView)
    {
        if (intval($this->thumbnailWidthPostingThirdImageView) !== intval($thumbnailWidthPostingThirdImageView)) {
            $this->thumbnailWidthPostingThirdImageView = intval($thumbnailWidthPostingThirdImageView);
        }
    }
    
    /**
     * Returns the thumbnail height posting third image view.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingThirdImageView()
    {
        return $this->thumbnailHeightPostingThirdImageView;
    }
    
    /**
     * Sets the thumbnail height posting third image view.
     *
     * @param integer $thumbnailHeightPostingThirdImageView
     *
     * @return void
     */
    public function setThumbnailHeightPostingThirdImageView($thumbnailHeightPostingThirdImageView)
    {
        if (intval($this->thumbnailHeightPostingThirdImageView) !== intval($thumbnailHeightPostingThirdImageView)) {
            $this->thumbnailHeightPostingThirdImageView = intval($thumbnailHeightPostingThirdImageView);
        }
    }
    
    /**
     * Returns the thumbnail width posting third image display.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingThirdImageDisplay()
    {
        return $this->thumbnailWidthPostingThirdImageDisplay;
    }
    
    /**
     * Sets the thumbnail width posting third image display.
     *
     * @param integer $thumbnailWidthPostingThirdImageDisplay
     *
     * @return void
     */
    public function setThumbnailWidthPostingThirdImageDisplay($thumbnailWidthPostingThirdImageDisplay)
    {
        if (intval($this->thumbnailWidthPostingThirdImageDisplay) !== intval($thumbnailWidthPostingThirdImageDisplay)) {
            $this->thumbnailWidthPostingThirdImageDisplay = intval($thumbnailWidthPostingThirdImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height posting third image display.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingThirdImageDisplay()
    {
        return $this->thumbnailHeightPostingThirdImageDisplay;
    }
    
    /**
     * Sets the thumbnail height posting third image display.
     *
     * @param integer $thumbnailHeightPostingThirdImageDisplay
     *
     * @return void
     */
    public function setThumbnailHeightPostingThirdImageDisplay($thumbnailHeightPostingThirdImageDisplay)
    {
        if (intval($this->thumbnailHeightPostingThirdImageDisplay) !== intval($thumbnailHeightPostingThirdImageDisplay)) {
            $this->thumbnailHeightPostingThirdImageDisplay = intval($thumbnailHeightPostingThirdImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width posting third image edit.
     *
     * @return integer
     */
    public function getThumbnailWidthPostingThirdImageEdit()
    {
        return $this->thumbnailWidthPostingThirdImageEdit;
    }
    
    /**
     * Sets the thumbnail width posting third image edit.
     *
     * @param integer $thumbnailWidthPostingThirdImageEdit
     *
     * @return void
     */
    public function setThumbnailWidthPostingThirdImageEdit($thumbnailWidthPostingThirdImageEdit)
    {
        if (intval($this->thumbnailWidthPostingThirdImageEdit) !== intval($thumbnailWidthPostingThirdImageEdit)) {
            $this->thumbnailWidthPostingThirdImageEdit = intval($thumbnailWidthPostingThirdImageEdit);
        }
    }
    
    /**
     * Returns the thumbnail height posting third image edit.
     *
     * @return integer
     */
    public function getThumbnailHeightPostingThirdImageEdit()
    {
        return $this->thumbnailHeightPostingThirdImageEdit;
    }
    
    /**
     * Sets the thumbnail height posting third image edit.
     *
     * @param integer $thumbnailHeightPostingThirdImageEdit
     *
     * @return void
     */
    public function setThumbnailHeightPostingThirdImageEdit($thumbnailHeightPostingThirdImageEdit)
    {
        if (intval($this->thumbnailHeightPostingThirdImageEdit) !== intval($thumbnailHeightPostingThirdImageEdit)) {
            $this->thumbnailHeightPostingThirdImageEdit = intval($thumbnailHeightPostingThirdImageEdit);
        }
    }
    
    /**
     * Returns the enable shrinking for rank upload image.
     *
     * @return boolean
     */
    public function getEnableShrinkingForRankUploadImage()
    {
        return $this->enableShrinkingForRankUploadImage;
    }
    
    /**
     * Sets the enable shrinking for rank upload image.
     *
     * @param boolean $enableShrinkingForRankUploadImage
     *
     * @return void
     */
    public function setEnableShrinkingForRankUploadImage($enableShrinkingForRankUploadImage)
    {
        if (boolval($this->enableShrinkingForRankUploadImage) !== boolval($enableShrinkingForRankUploadImage)) {
            $this->enableShrinkingForRankUploadImage = boolval($enableShrinkingForRankUploadImage);
        }
    }
    
    /**
     * Returns the shrink width rank upload image.
     *
     * @return integer
     */
    public function getShrinkWidthRankUploadImage()
    {
        return $this->shrinkWidthRankUploadImage;
    }
    
    /**
     * Sets the shrink width rank upload image.
     *
     * @param integer $shrinkWidthRankUploadImage
     *
     * @return void
     */
    public function setShrinkWidthRankUploadImage($shrinkWidthRankUploadImage)
    {
        if (intval($this->shrinkWidthRankUploadImage) !== intval($shrinkWidthRankUploadImage)) {
            $this->shrinkWidthRankUploadImage = intval($shrinkWidthRankUploadImage);
        }
    }
    
    /**
     * Returns the shrink height rank upload image.
     *
     * @return integer
     */
    public function getShrinkHeightRankUploadImage()
    {
        return $this->shrinkHeightRankUploadImage;
    }
    
    /**
     * Sets the shrink height rank upload image.
     *
     * @param integer $shrinkHeightRankUploadImage
     *
     * @return void
     */
    public function setShrinkHeightRankUploadImage($shrinkHeightRankUploadImage)
    {
        if (intval($this->shrinkHeightRankUploadImage) !== intval($shrinkHeightRankUploadImage)) {
            $this->shrinkHeightRankUploadImage = intval($shrinkHeightRankUploadImage);
        }
    }
    
    /**
     * Returns the thumbnail mode rank upload image.
     *
     * @return string
     */
    public function getThumbnailModeRankUploadImage()
    {
        return $this->thumbnailModeRankUploadImage;
    }
    
    /**
     * Sets the thumbnail mode rank upload image.
     *
     * @param string $thumbnailModeRankUploadImage
     *
     * @return void
     */
    public function setThumbnailModeRankUploadImage($thumbnailModeRankUploadImage)
    {
        if ($this->thumbnailModeRankUploadImage !== $thumbnailModeRankUploadImage) {
            $this->thumbnailModeRankUploadImage = isset($thumbnailModeRankUploadImage) ? $thumbnailModeRankUploadImage : '';
        }
    }
    
    /**
     * Returns the thumbnail width rank upload image view.
     *
     * @return integer
     */
    public function getThumbnailWidthRankUploadImageView()
    {
        return $this->thumbnailWidthRankUploadImageView;
    }
    
    /**
     * Sets the thumbnail width rank upload image view.
     *
     * @param integer $thumbnailWidthRankUploadImageView
     *
     * @return void
     */
    public function setThumbnailWidthRankUploadImageView($thumbnailWidthRankUploadImageView)
    {
        if (intval($this->thumbnailWidthRankUploadImageView) !== intval($thumbnailWidthRankUploadImageView)) {
            $this->thumbnailWidthRankUploadImageView = intval($thumbnailWidthRankUploadImageView);
        }
    }
    
    /**
     * Returns the thumbnail height rank upload image view.
     *
     * @return integer
     */
    public function getThumbnailHeightRankUploadImageView()
    {
        return $this->thumbnailHeightRankUploadImageView;
    }
    
    /**
     * Sets the thumbnail height rank upload image view.
     *
     * @param integer $thumbnailHeightRankUploadImageView
     *
     * @return void
     */
    public function setThumbnailHeightRankUploadImageView($thumbnailHeightRankUploadImageView)
    {
        if (intval($this->thumbnailHeightRankUploadImageView) !== intval($thumbnailHeightRankUploadImageView)) {
            $this->thumbnailHeightRankUploadImageView = intval($thumbnailHeightRankUploadImageView);
        }
    }
    
    /**
     * Returns the thumbnail width rank upload image display.
     *
     * @return integer
     */
    public function getThumbnailWidthRankUploadImageDisplay()
    {
        return $this->thumbnailWidthRankUploadImageDisplay;
    }
    
    /**
     * Sets the thumbnail width rank upload image display.
     *
     * @param integer $thumbnailWidthRankUploadImageDisplay
     *
     * @return void
     */
    public function setThumbnailWidthRankUploadImageDisplay($thumbnailWidthRankUploadImageDisplay)
    {
        if (intval($this->thumbnailWidthRankUploadImageDisplay) !== intval($thumbnailWidthRankUploadImageDisplay)) {
            $this->thumbnailWidthRankUploadImageDisplay = intval($thumbnailWidthRankUploadImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height rank upload image display.
     *
     * @return integer
     */
    public function getThumbnailHeightRankUploadImageDisplay()
    {
        return $this->thumbnailHeightRankUploadImageDisplay;
    }
    
    /**
     * Sets the thumbnail height rank upload image display.
     *
     * @param integer $thumbnailHeightRankUploadImageDisplay
     *
     * @return void
     */
    public function setThumbnailHeightRankUploadImageDisplay($thumbnailHeightRankUploadImageDisplay)
    {
        if (intval($this->thumbnailHeightRankUploadImageDisplay) !== intval($thumbnailHeightRankUploadImageDisplay)) {
            $this->thumbnailHeightRankUploadImageDisplay = intval($thumbnailHeightRankUploadImageDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width rank upload image edit.
     *
     * @return integer
     */
    public function getThumbnailWidthRankUploadImageEdit()
    {
        return $this->thumbnailWidthRankUploadImageEdit;
    }
    
    /**
     * Sets the thumbnail width rank upload image edit.
     *
     * @param integer $thumbnailWidthRankUploadImageEdit
     *
     * @return void
     */
    public function setThumbnailWidthRankUploadImageEdit($thumbnailWidthRankUploadImageEdit)
    {
        if (intval($this->thumbnailWidthRankUploadImageEdit) !== intval($thumbnailWidthRankUploadImageEdit)) {
            $this->thumbnailWidthRankUploadImageEdit = intval($thumbnailWidthRankUploadImageEdit);
        }
    }
    
    /**
     * Returns the thumbnail height rank upload image edit.
     *
     * @return integer
     */
    public function getThumbnailHeightRankUploadImageEdit()
    {
        return $this->thumbnailHeightRankUploadImageEdit;
    }
    
    /**
     * Sets the thumbnail height rank upload image edit.
     *
     * @param integer $thumbnailHeightRankUploadImageEdit
     *
     * @return void
     */
    public function setThumbnailHeightRankUploadImageEdit($thumbnailHeightRankUploadImageEdit)
    {
        if (intval($this->thumbnailHeightRankUploadImageEdit) !== intval($thumbnailHeightRankUploadImageEdit)) {
            $this->thumbnailHeightRankUploadImageEdit = intval($thumbnailHeightRankUploadImageEdit);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUBoardModule');
    
        if (isset($moduleVars['uploadImages'])) {
            $this->setUploadImages($moduleVars['uploadImages']);
        }
        if (isset($moduleVars['allowedSizeOfImages'])) {
            $this->setAllowedSizeOfImages($moduleVars['allowedSizeOfImages']);
        }
        if (isset($moduleVars['numberImages'])) {
            $this->setNumberImages($moduleVars['numberImages']);
        }
        if (isset($moduleVars['uploadFiles'])) {
            $this->setUploadFiles($moduleVars['uploadFiles']);
        }
        if (isset($moduleVars['allowedSizeOfFiles'])) {
            $this->setAllowedSizeOfFiles($moduleVars['allowedSizeOfFiles']);
        }
        if (isset($moduleVars['numberFiles'])) {
            $this->setNumberFiles($moduleVars['numberFiles']);
        }
        if (isset($moduleVars['editPostings'])) {
            $this->setEditPostings($moduleVars['editPostings']);
        }
        if (isset($moduleVars['editTime'])) {
            $this->setEditTime($moduleVars['editTime']);
        }
        if (isset($moduleVars['latestPostings'])) {
            $this->setLatestPostings($moduleVars['latestPostings']);
        }
        if (isset($moduleVars['sortingCategories'])) {
            $this->setSortingCategories($moduleVars['sortingCategories']);
        }
        if (isset($moduleVars['sortingForums'])) {
            $this->setSortingForums($moduleVars['sortingForums']);
        }
        if (isset($moduleVars['sortingPostings'])) {
            $this->setSortingPostings($moduleVars['sortingPostings']);
        }
        if (isset($moduleVars['standardIcon'])) {
            $this->setStandardIcon($moduleVars['standardIcon']);
        }
        if (isset($moduleVars['specialIcon'])) {
            $this->setSpecialIcon($moduleVars['specialIcon']);
        }
        if (isset($moduleVars['iconSet'])) {
            $this->setIconSet($moduleVars['iconSet']);
        }
        if (isset($moduleVars['template'])) {
            $this->setTemplate($moduleVars['template']);
        }
        if (isset($moduleVars['showStatisticInDetails'])) {
            $this->setShowStatisticInDetails($moduleVars['showStatisticInDetails']);
        }
        if (isset($moduleVars['showStatisticOnBottom'])) {
            $this->setShowStatisticOnBottom($moduleVars['showStatisticOnBottom']);
        }
        if (isset($moduleVars['moderationGroupForPostings'])) {
            $this->setModerationGroupForPostings($moduleVars['moderationGroupForPostings']);
        }
        if (isset($moduleVars['categoryEntriesPerPage'])) {
            $this->setCategoryEntriesPerPage($moduleVars['categoryEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnCategoriesOnAccountPage'])) {
            $this->setLinkOwnCategoriesOnAccountPage($moduleVars['linkOwnCategoriesOnAccountPage']);
        }
        if (isset($moduleVars['forumEntriesPerPage'])) {
            $this->setForumEntriesPerPage($moduleVars['forumEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnForumsOnAccountPage'])) {
            $this->setLinkOwnForumsOnAccountPage($moduleVars['linkOwnForumsOnAccountPage']);
        }
        if (isset($moduleVars['postingEntriesPerPage'])) {
            $this->setPostingEntriesPerPage($moduleVars['postingEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnPostingsOnAccountPage'])) {
            $this->setLinkOwnPostingsOnAccountPage($moduleVars['linkOwnPostingsOnAccountPage']);
        }
        if (isset($moduleVars['aboEntriesPerPage'])) {
            $this->setAboEntriesPerPage($moduleVars['aboEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnAbosOnAccountPage'])) {
            $this->setLinkOwnAbosOnAccountPage($moduleVars['linkOwnAbosOnAccountPage']);
        }
        if (isset($moduleVars['userEntriesPerPage'])) {
            $this->setUserEntriesPerPage($moduleVars['userEntriesPerPage']);
        }
        if (isset($moduleVars['rankEntriesPerPage'])) {
            $this->setRankEntriesPerPage($moduleVars['rankEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnRanksOnAccountPage'])) {
            $this->setLinkOwnRanksOnAccountPage($moduleVars['linkOwnRanksOnAccountPage']);
        }
        if (isset($moduleVars['enableShrinkingForPostingFirstImage'])) {
            $this->setEnableShrinkingForPostingFirstImage($moduleVars['enableShrinkingForPostingFirstImage']);
        }
        if (isset($moduleVars['shrinkWidthPostingFirstImage'])) {
            $this->setShrinkWidthPostingFirstImage($moduleVars['shrinkWidthPostingFirstImage']);
        }
        if (isset($moduleVars['shrinkHeightPostingFirstImage'])) {
            $this->setShrinkHeightPostingFirstImage($moduleVars['shrinkHeightPostingFirstImage']);
        }
        if (isset($moduleVars['thumbnailModePostingFirstImage'])) {
            $this->setThumbnailModePostingFirstImage($moduleVars['thumbnailModePostingFirstImage']);
        }
        if (isset($moduleVars['thumbnailWidthPostingFirstImageView'])) {
            $this->setThumbnailWidthPostingFirstImageView($moduleVars['thumbnailWidthPostingFirstImageView']);
        }
        if (isset($moduleVars['thumbnailHeightPostingFirstImageView'])) {
            $this->setThumbnailHeightPostingFirstImageView($moduleVars['thumbnailHeightPostingFirstImageView']);
        }
        if (isset($moduleVars['thumbnailWidthPostingFirstImageDisplay'])) {
            $this->setThumbnailWidthPostingFirstImageDisplay($moduleVars['thumbnailWidthPostingFirstImageDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightPostingFirstImageDisplay'])) {
            $this->setThumbnailHeightPostingFirstImageDisplay($moduleVars['thumbnailHeightPostingFirstImageDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthPostingFirstImageEdit'])) {
            $this->setThumbnailWidthPostingFirstImageEdit($moduleVars['thumbnailWidthPostingFirstImageEdit']);
        }
        if (isset($moduleVars['thumbnailHeightPostingFirstImageEdit'])) {
            $this->setThumbnailHeightPostingFirstImageEdit($moduleVars['thumbnailHeightPostingFirstImageEdit']);
        }
        if (isset($moduleVars['enableShrinkingForPostingSecondImage'])) {
            $this->setEnableShrinkingForPostingSecondImage($moduleVars['enableShrinkingForPostingSecondImage']);
        }
        if (isset($moduleVars['shrinkWidthPostingSecondImage'])) {
            $this->setShrinkWidthPostingSecondImage($moduleVars['shrinkWidthPostingSecondImage']);
        }
        if (isset($moduleVars['shrinkHeightPostingSecondImage'])) {
            $this->setShrinkHeightPostingSecondImage($moduleVars['shrinkHeightPostingSecondImage']);
        }
        if (isset($moduleVars['thumbnailModePostingSecondImage'])) {
            $this->setThumbnailModePostingSecondImage($moduleVars['thumbnailModePostingSecondImage']);
        }
        if (isset($moduleVars['thumbnailWidthPostingSecondImageView'])) {
            $this->setThumbnailWidthPostingSecondImageView($moduleVars['thumbnailWidthPostingSecondImageView']);
        }
        if (isset($moduleVars['thumbnailHeightPostingSecondImageView'])) {
            $this->setThumbnailHeightPostingSecondImageView($moduleVars['thumbnailHeightPostingSecondImageView']);
        }
        if (isset($moduleVars['thumbnailWidthPostingSecondImageDisplay'])) {
            $this->setThumbnailWidthPostingSecondImageDisplay($moduleVars['thumbnailWidthPostingSecondImageDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightPostingSecondImageDisplay'])) {
            $this->setThumbnailHeightPostingSecondImageDisplay($moduleVars['thumbnailHeightPostingSecondImageDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthPostingSecondImageEdit'])) {
            $this->setThumbnailWidthPostingSecondImageEdit($moduleVars['thumbnailWidthPostingSecondImageEdit']);
        }
        if (isset($moduleVars['thumbnailHeightPostingSecondImageEdit'])) {
            $this->setThumbnailHeightPostingSecondImageEdit($moduleVars['thumbnailHeightPostingSecondImageEdit']);
        }
        if (isset($moduleVars['enableShrinkingForPostingThirdImage'])) {
            $this->setEnableShrinkingForPostingThirdImage($moduleVars['enableShrinkingForPostingThirdImage']);
        }
        if (isset($moduleVars['shrinkWidthPostingThirdImage'])) {
            $this->setShrinkWidthPostingThirdImage($moduleVars['shrinkWidthPostingThirdImage']);
        }
        if (isset($moduleVars['shrinkHeightPostingThirdImage'])) {
            $this->setShrinkHeightPostingThirdImage($moduleVars['shrinkHeightPostingThirdImage']);
        }
        if (isset($moduleVars['thumbnailModePostingThirdImage'])) {
            $this->setThumbnailModePostingThirdImage($moduleVars['thumbnailModePostingThirdImage']);
        }
        if (isset($moduleVars['thumbnailWidthPostingThirdImageView'])) {
            $this->setThumbnailWidthPostingThirdImageView($moduleVars['thumbnailWidthPostingThirdImageView']);
        }
        if (isset($moduleVars['thumbnailHeightPostingThirdImageView'])) {
            $this->setThumbnailHeightPostingThirdImageView($moduleVars['thumbnailHeightPostingThirdImageView']);
        }
        if (isset($moduleVars['thumbnailWidthPostingThirdImageDisplay'])) {
            $this->setThumbnailWidthPostingThirdImageDisplay($moduleVars['thumbnailWidthPostingThirdImageDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightPostingThirdImageDisplay'])) {
            $this->setThumbnailHeightPostingThirdImageDisplay($moduleVars['thumbnailHeightPostingThirdImageDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthPostingThirdImageEdit'])) {
            $this->setThumbnailWidthPostingThirdImageEdit($moduleVars['thumbnailWidthPostingThirdImageEdit']);
        }
        if (isset($moduleVars['thumbnailHeightPostingThirdImageEdit'])) {
            $this->setThumbnailHeightPostingThirdImageEdit($moduleVars['thumbnailHeightPostingThirdImageEdit']);
        }
        if (isset($moduleVars['enableShrinkingForRankUploadImage'])) {
            $this->setEnableShrinkingForRankUploadImage($moduleVars['enableShrinkingForRankUploadImage']);
        }
        if (isset($moduleVars['shrinkWidthRankUploadImage'])) {
            $this->setShrinkWidthRankUploadImage($moduleVars['shrinkWidthRankUploadImage']);
        }
        if (isset($moduleVars['shrinkHeightRankUploadImage'])) {
            $this->setShrinkHeightRankUploadImage($moduleVars['shrinkHeightRankUploadImage']);
        }
        if (isset($moduleVars['thumbnailModeRankUploadImage'])) {
            $this->setThumbnailModeRankUploadImage($moduleVars['thumbnailModeRankUploadImage']);
        }
        if (isset($moduleVars['thumbnailWidthRankUploadImageView'])) {
            $this->setThumbnailWidthRankUploadImageView($moduleVars['thumbnailWidthRankUploadImageView']);
        }
        if (isset($moduleVars['thumbnailHeightRankUploadImageView'])) {
            $this->setThumbnailHeightRankUploadImageView($moduleVars['thumbnailHeightRankUploadImageView']);
        }
        if (isset($moduleVars['thumbnailWidthRankUploadImageDisplay'])) {
            $this->setThumbnailWidthRankUploadImageDisplay($moduleVars['thumbnailWidthRankUploadImageDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightRankUploadImageDisplay'])) {
            $this->setThumbnailHeightRankUploadImageDisplay($moduleVars['thumbnailHeightRankUploadImageDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthRankUploadImageEdit'])) {
            $this->setThumbnailWidthRankUploadImageEdit($moduleVars['thumbnailWidthRankUploadImageEdit']);
        }
        if (isset($moduleVars['thumbnailHeightRankUploadImageEdit'])) {
            $this->setThumbnailHeightRankUploadImageEdit($moduleVars['thumbnailHeightRankUploadImageEdit']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    
        // prepare group selectors, fallback to admin group for undefined values
        $adminGroupId = GroupsConstant::GROUP_ID_ADMIN;
        $groupId = $this->getModerationGroupForPostings();
        if ($groupId < 1) {
            $groupId = $adminGroupId;
        }
    
        $this->setModerationGroupForPostings($this->groupRepository->find($groupId));
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        // normalise group selector values
        $group = $this->getModerationGroupForPostings();
        $group = is_object($group) ? $group->getGid() : intval($group);
        $this->setModerationGroupForPostings($group);
    
        $this->variableApi->set('MUBoardModule', 'uploadImages', $this->getUploadImages());
        $this->variableApi->set('MUBoardModule', 'allowedSizeOfImages', $this->getAllowedSizeOfImages());
        $this->variableApi->set('MUBoardModule', 'numberImages', $this->getNumberImages());
        $this->variableApi->set('MUBoardModule', 'uploadFiles', $this->getUploadFiles());
        $this->variableApi->set('MUBoardModule', 'allowedSizeOfFiles', $this->getAllowedSizeOfFiles());
        $this->variableApi->set('MUBoardModule', 'numberFiles', $this->getNumberFiles());
        $this->variableApi->set('MUBoardModule', 'editPostings', $this->getEditPostings());
        $this->variableApi->set('MUBoardModule', 'editTime', $this->getEditTime());
        $this->variableApi->set('MUBoardModule', 'latestPostings', $this->getLatestPostings());
        $this->variableApi->set('MUBoardModule', 'sortingCategories', $this->getSortingCategories());
        $this->variableApi->set('MUBoardModule', 'sortingForums', $this->getSortingForums());
        $this->variableApi->set('MUBoardModule', 'sortingPostings', $this->getSortingPostings());
        $this->variableApi->set('MUBoardModule', 'standardIcon', $this->getStandardIcon());
        $this->variableApi->set('MUBoardModule', 'specialIcon', $this->getSpecialIcon());
        $this->variableApi->set('MUBoardModule', 'iconSet', $this->getIconSet());
        $this->variableApi->set('MUBoardModule', 'template', $this->getTemplate());
        $this->variableApi->set('MUBoardModule', 'showStatisticInDetails', $this->getShowStatisticInDetails());
        $this->variableApi->set('MUBoardModule', 'showStatisticOnBottom', $this->getShowStatisticOnBottom());
        $this->variableApi->set('MUBoardModule', 'moderationGroupForPostings', $this->getModerationGroupForPostings());
        $this->variableApi->set('MUBoardModule', 'categoryEntriesPerPage', $this->getCategoryEntriesPerPage());
        $this->variableApi->set('MUBoardModule', 'linkOwnCategoriesOnAccountPage', $this->getLinkOwnCategoriesOnAccountPage());
        $this->variableApi->set('MUBoardModule', 'forumEntriesPerPage', $this->getForumEntriesPerPage());
        $this->variableApi->set('MUBoardModule', 'linkOwnForumsOnAccountPage', $this->getLinkOwnForumsOnAccountPage());
        $this->variableApi->set('MUBoardModule', 'postingEntriesPerPage', $this->getPostingEntriesPerPage());
        $this->variableApi->set('MUBoardModule', 'linkOwnPostingsOnAccountPage', $this->getLinkOwnPostingsOnAccountPage());
        $this->variableApi->set('MUBoardModule', 'aboEntriesPerPage', $this->getAboEntriesPerPage());
        $this->variableApi->set('MUBoardModule', 'linkOwnAbosOnAccountPage', $this->getLinkOwnAbosOnAccountPage());
        $this->variableApi->set('MUBoardModule', 'userEntriesPerPage', $this->getUserEntriesPerPage());
        $this->variableApi->set('MUBoardModule', 'rankEntriesPerPage', $this->getRankEntriesPerPage());
        $this->variableApi->set('MUBoardModule', 'linkOwnRanksOnAccountPage', $this->getLinkOwnRanksOnAccountPage());
        $this->variableApi->set('MUBoardModule', 'enableShrinkingForPostingFirstImage', $this->getEnableShrinkingForPostingFirstImage());
        $this->variableApi->set('MUBoardModule', 'shrinkWidthPostingFirstImage', $this->getShrinkWidthPostingFirstImage());
        $this->variableApi->set('MUBoardModule', 'shrinkHeightPostingFirstImage', $this->getShrinkHeightPostingFirstImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailModePostingFirstImage', $this->getThumbnailModePostingFirstImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingFirstImageView', $this->getThumbnailWidthPostingFirstImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingFirstImageView', $this->getThumbnailHeightPostingFirstImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingFirstImageDisplay', $this->getThumbnailWidthPostingFirstImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingFirstImageDisplay', $this->getThumbnailHeightPostingFirstImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingFirstImageEdit', $this->getThumbnailWidthPostingFirstImageEdit());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingFirstImageEdit', $this->getThumbnailHeightPostingFirstImageEdit());
        $this->variableApi->set('MUBoardModule', 'enableShrinkingForPostingSecondImage', $this->getEnableShrinkingForPostingSecondImage());
        $this->variableApi->set('MUBoardModule', 'shrinkWidthPostingSecondImage', $this->getShrinkWidthPostingSecondImage());
        $this->variableApi->set('MUBoardModule', 'shrinkHeightPostingSecondImage', $this->getShrinkHeightPostingSecondImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailModePostingSecondImage', $this->getThumbnailModePostingSecondImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingSecondImageView', $this->getThumbnailWidthPostingSecondImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingSecondImageView', $this->getThumbnailHeightPostingSecondImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingSecondImageDisplay', $this->getThumbnailWidthPostingSecondImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingSecondImageDisplay', $this->getThumbnailHeightPostingSecondImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingSecondImageEdit', $this->getThumbnailWidthPostingSecondImageEdit());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingSecondImageEdit', $this->getThumbnailHeightPostingSecondImageEdit());
        $this->variableApi->set('MUBoardModule', 'enableShrinkingForPostingThirdImage', $this->getEnableShrinkingForPostingThirdImage());
        $this->variableApi->set('MUBoardModule', 'shrinkWidthPostingThirdImage', $this->getShrinkWidthPostingThirdImage());
        $this->variableApi->set('MUBoardModule', 'shrinkHeightPostingThirdImage', $this->getShrinkHeightPostingThirdImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailModePostingThirdImage', $this->getThumbnailModePostingThirdImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingThirdImageView', $this->getThumbnailWidthPostingThirdImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingThirdImageView', $this->getThumbnailHeightPostingThirdImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingThirdImageDisplay', $this->getThumbnailWidthPostingThirdImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingThirdImageDisplay', $this->getThumbnailHeightPostingThirdImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthPostingThirdImageEdit', $this->getThumbnailWidthPostingThirdImageEdit());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightPostingThirdImageEdit', $this->getThumbnailHeightPostingThirdImageEdit());
        $this->variableApi->set('MUBoardModule', 'enableShrinkingForRankUploadImage', $this->getEnableShrinkingForRankUploadImage());
        $this->variableApi->set('MUBoardModule', 'shrinkWidthRankUploadImage', $this->getShrinkWidthRankUploadImage());
        $this->variableApi->set('MUBoardModule', 'shrinkHeightRankUploadImage', $this->getShrinkHeightRankUploadImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailModeRankUploadImage', $this->getThumbnailModeRankUploadImage());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthRankUploadImageView', $this->getThumbnailWidthRankUploadImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightRankUploadImageView', $this->getThumbnailHeightRankUploadImageView());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthRankUploadImageDisplay', $this->getThumbnailWidthRankUploadImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightRankUploadImageDisplay', $this->getThumbnailHeightRankUploadImageDisplay());
        $this->variableApi->set('MUBoardModule', 'thumbnailWidthRankUploadImageEdit', $this->getThumbnailWidthRankUploadImageEdit());
        $this->variableApi->set('MUBoardModule', 'thumbnailHeightRankUploadImageEdit', $this->getThumbnailHeightRankUploadImageEdit());
        $this->variableApi->set('MUBoardModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
