<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Entity;

use MU\BoardModule\Entity\Base\AbstractForumEntity as BaseEntity;
use Doctrine\ORM\Mapping as ORM;


/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the concrete entity class for forum entities.
 * @ORM\Entity(repositoryClass="MU\BoardModule\Entity\Repository\ForumRepository")
 * @ORM\Table(name="mu_board_forum",
 *     indexes={
 *         @ORM\Index(name="workflowstateindex", columns={"workflowState"})
 *     }
 * )
 */
class ForumEntity extends BaseEntity
{
	/**
	 * @var integer $countIssues
	 */
	protected $countIssues = 0;
	
	/**
	 * Returns the countIssues.
	 *
	 * @return integer
	 */
	public function getCountIssues()
	{
		return $this->countIssues;
	}
	
	/**
	 * Sets the countIssues.
	 *
	 * @param integer $countIssues
	 *
	 * @return void
	 */
	public function setCountIssues($countIssues)
	{
		if (intval($this->countIssues) !== intval($countIssues)) {
			$this->countIssues = intval($countIssues);
		}
	}
    /**
     * @var integer $countPostings
     */
    protected $countPostings = 0;
    
    /**
     * Returns the countPostings.
     *
     * @return integer
     */
    public function getCountPostings()
    {
    	return $this->countPostings;
    }
    
    /**
     * Sets the countPostings.
     *
     * @param integer $countPostings
     *
     * @return void
     */
    public function setCountPostings($countPostings)
    {
    	if (intval($this->countPostings) !== intval($countPostings)) {
    		$this->countPostings = intval($countPostings);
    	}
    }
    
    /**
     * @var \MU\BoardModule\Entity\PostingEntity $last
     */
    protected $last = '';
    
    /**
     * Returns the last.
     *
     * @return object
     */
    public function getLast()
    {
    	return $this->last;
    }
    
    /**
     * Sets the last.
     *
     * @param object $last
     *
     * @return void
     */
    public function setLast($last)
    {
    	if ($this->last !== $last) {
    		$this->last = $last;
    	}
    }
}
