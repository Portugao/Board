<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\BoardModule\Traits\StandardFieldsTrait;
use MU\BoardModule\Validator\Constraints as BoardAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for posting entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractPostingEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'posting';
    
    /**
     * @var string Path to upload base folder
     */
    protected $_uploadBasePath = '';
    
    /**
     * @var string Base URL to upload files
     */
    protected $_uploadBaseUrl = '';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="posting", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(type="integer", nullable=true)
     * @var integer $parent_id
     */
    protected $parent_id = 0;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=20000)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="20000")
     * @var text $text
     */
    protected $text = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $invocations
     */
    protected $invocations = 0;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $state
     */
    protected $state = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $solved
     */
    protected $solved = false;
    
    /**
     * First image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $firstImageMeta
     */
    protected $firstImageMeta = [];
    
    /**
     * @ORM\Column(name="firstImage", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $firstImageFileName
     */
    protected $firstImageFileName = null;
    
    /**
     * Full first image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $firstImageUrl
     */
    protected $firstImageUrl = '';
    
    /**
     * First image file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $firstImage
     */
    protected $firstImage = null;
    
    /**
     * Second image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $secondImageMeta
     */
    protected $secondImageMeta = [];
    
    /**
     * @ORM\Column(name="secondImage", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $secondImageFileName
     */
    protected $secondImageFileName = null;
    
    /**
     * Full second image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $secondImageUrl
     */
    protected $secondImageUrl = '';
    
    /**
     * Second image file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $secondImage
     */
    protected $secondImage = null;
    
    /**
     * Third image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $thirdImageMeta
     */
    protected $thirdImageMeta = [];
    
    /**
     * @ORM\Column(name="thirdImage", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $thirdImageFileName
     */
    protected $thirdImageFileName = null;
    
    /**
     * Full third image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $thirdImageUrl
     */
    protected $thirdImageUrl = '';
    
    /**
     * Third image file object.
     *
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $thirdImage
     */
    protected $thirdImage = null;
    
    /**
     * First file meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $firstFileMeta
     */
    protected $firstFileMeta = [];
    
    /**
     * @ORM\Column(name="firstFile", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $firstFileFileName
     */
    protected $firstFileFileName = null;
    
    /**
     * Full first file path as url.
     *
     * @Assert\Type(type="string")
     * @var string $firstFileUrl
     */
    protected $firstFileUrl = '';
    
    /**
     * First file file object.
     *
     * @Assert\File(
     *    maxSize = "2M",
     *    mimeTypes = {"application/*"}
     * )
     * @var File $firstFile
     */
    protected $firstFile = null;
    
    /**
     * Second file meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $secondFileMeta
     */
    protected $secondFileMeta = [];
    
    /**
     * @ORM\Column(name="secondFile", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $secondFileFileName
     */
    protected $secondFileFileName = null;
    
    /**
     * Full second file path as url.
     *
     * @Assert\Type(type="string")
     * @var string $secondFileUrl
     */
    protected $secondFileUrl = '';
    
    /**
     * Second file file object.
     *
     * @Assert\File(
     *    maxSize = "2M",
     *    mimeTypes = {"application/*"}
     * )
     * @var File $secondFile
     */
    protected $secondFile = null;
    
    /**
     * Third file meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $thirdFileMeta
     */
    protected $thirdFileMeta = [];
    
    /**
     * @ORM\Column(name="thirdFile", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $thirdFileFileName
     */
    protected $thirdFileFileName = null;
    
    /**
     * Full third file path as url.
     *
     * @Assert\Type(type="string")
     * @var string $thirdFileUrl
     */
    protected $thirdFileUrl = '';
    
    /**
     * Third file file object.
     *
     * @Assert\File(
     *    maxSize = "2M",
     *    mimeTypes = {"application/*"}
     * )
     * @var File $thirdFile
     */
    protected $thirdFile = null;
    
    
    /**
     * Bidirectional - Many children [postings] are linked by one parent [posting] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\BoardModule\Entity\PostingEntity", inversedBy="children")
     * @ORM\JoinTable(name="mu_board_posting",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" )},
     *      inverseJoinColumns={@ORM\JoinColumn(name="parent_id", referencedColumnName="id" )}
     * )
     * @Assert\Type(type="MU\BoardModule\Entity\PostingEntity")
     * @var \MU\BoardModule\Entity\PostingEntity $parent
     */
    protected $parent;
    
    /**
     * Bidirectional - Many posting [postings] are linked by one forum [forum] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\BoardModule\Entity\ForumEntity", inversedBy="posting")
     * @ORM\JoinTable(name="mu_board_forum")
     * @Assert\Type(type="MU\BoardModule\Entity\ForumEntity")
     * @var \MU\BoardModule\Entity\ForumEntity $forum
     */
    protected $forum;
    
    /**
     * Bidirectional - One parent [posting] has many children [postings] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\BoardModule\Entity\PostingEntity", mappedBy="parent", cascade={"remove"})
     * @ORM\JoinTable(name="mu_board_parentchildren",
     *      joinColumns={@ORM\JoinColumn(name="parent_id", referencedColumnName="id" )},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" )}
     * )
     * @ORM\OrderBy({"createdDate" = "ASC"})
     * @var \MU\BoardModule\Entity\PostingEntity[] $children
     */
    protected $children = null;
    
    
    /**
     * PostingEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->children = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = isset($_objectType) ? $_objectType : '';
        }
    }
    
    /**
     * Returns the _upload base path.
     *
     * @return string
     */
    public function get_uploadBasePath()
    {
        return $this->_uploadBasePath;
    }
    
    /**
     * Sets the _upload base path.
     *
     * @param string $_uploadBasePath
     *
     * @return void
     */
    public function set_uploadBasePath($_uploadBasePath)
    {
        if ($this->_uploadBasePath != $_uploadBasePath) {
            $this->_uploadBasePath = isset($_uploadBasePath) ? $_uploadBasePath : '';
        }
    }
    
    /**
     * Returns the _upload base url.
     *
     * @return string
     */
    public function get_uploadBaseUrl()
    {
        return $this->_uploadBaseUrl;
    }
    
    /**
     * Sets the _upload base url.
     *
     * @param string $_uploadBaseUrl
     *
     * @return void
     */
    public function set_uploadBaseUrl($_uploadBaseUrl)
    {
        if ($this->_uploadBaseUrl != $_uploadBaseUrl) {
            $this->_uploadBaseUrl = isset($_uploadBaseUrl) ? $_uploadBaseUrl : '';
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the parent_id.
     *
     * @return integer
     */
    public function getParent_id()
    {
        return $this->parent_id;
    }
    
    /**
     * Sets the parent_id.
     *
     * @param integer $parent_id
     *
     * @return void
     */
    public function setParent_id($parent_id)
    {
        if (intval($this->parent_id) !== intval($parent_id)) {
            $this->parent_id = intval($parent_id);
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the text.
     *
     * @return text
     */
    public function getText()
    {
        return $this->text;
    }
    
    /**
     * Sets the text.
     *
     * @param text $text
     *
     * @return void
     */
    public function setText($text)
    {
        if ($this->text !== $text) {
            $this->text = isset($text) ? $text : '';
        }
    }
    
    /**
     * Returns the invocations.
     *
     * @return integer
     */
    public function getInvocations()
    {
        return $this->invocations;
    }
    
    /**
     * Sets the invocations.
     *
     * @param integer $invocations
     *
     * @return void
     */
    public function setInvocations($invocations)
    {
        if (intval($this->invocations) !== intval($invocations)) {
            $this->invocations = intval($invocations);
        }
    }
    
    /**
     * Returns the state.
     *
     * @return boolean
     */
    public function getState()
    {
        return $this->state;
    }
    
    /**
     * Sets the state.
     *
     * @param boolean $state
     *
     * @return void
     */
    public function setState($state)
    {
        if (boolval($this->state) !== boolval($state)) {
            $this->state = boolval($state);
        }
    }
    
    /**
     * Returns the solved.
     *
     * @return boolean
     */
    public function getSolved()
    {
        return $this->solved;
    }
    
    /**
     * Sets the solved.
     *
     * @param boolean $solved
     *
     * @return void
     */
    public function setSolved($solved)
    {
        if (boolval($this->solved) !== boolval($solved)) {
            $this->solved = boolval($solved);
        }
    }
    
    /**
     * Returns the first image.
     *
     * @return File
     */
    public function getFirstImage()
    {
        if (null !== $this->firstImage) {
            return $this->firstImage;
        }
    
        $fileName = $this->firstImageFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getFirstImage().');
        }
    
        $filePath = $this->_uploadBasePath . 'firstimage/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->firstImage = new File($filePath);
            $this->setFirstImageUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setFirstImageFileName('');
            $this->setFirstImageUrl('');
            $this->setFirstImageMeta([]);
        }
    
        return $this->firstImage;
    }
    
    /**
     * Sets the first image.
     *
     * @param File|null $firstImage
     *
     * @return void
     */
    public function setFirstImage($firstImage)
    {
        if (null === $this->firstImage && null === $firstImage) {
            return;
        }
        if (null !== $this->firstImage && null !== $firstImage && $this->firstImage->getRealPath() === $firstImage->getRealPath()) {
            return;
        }
        $this->firstImage = $firstImage;
    
        if (null === $this->firstImage) {
            $this->setFirstImageFileName('');
            $this->setFirstImageUrl('');
            $this->setFirstImageMeta([]);
        } else {
            $this->setFirstImageFileName($this->firstImage->getFilename());
        }
    }
    
    /**
     * Returns the first image file name.
     *
     * @return string
     */
    public function getFirstImageFileName()
    {
        return $this->firstImageFileName;
    }
    
    /**
     * Sets the first image file name.
     *
     * @param string $firstImageFileName
     *
     * @return void
     */
    public function setFirstImageFileName($firstImageFileName)
    {
        if ($this->firstImageFileName !== $firstImageFileName) {
            $this->firstImageFileName = $firstImageFileName;
        }
    }
    
    /**
     * Returns the first image url.
     *
     * @return string
     */
    public function getFirstImageUrl()
    {
        return $this->firstImageUrl;
    }
    
    /**
     * Sets the first image url.
     *
     * @param string $firstImageUrl
     *
     * @return void
     */
    public function setFirstImageUrl($firstImageUrl)
    {
        if ($this->firstImageUrl !== $firstImageUrl) {
            $this->firstImageUrl = $firstImageUrl;
        }
    }
    
    /**
     * Returns the first image meta.
     *
     * @return array
     */
    public function getFirstImageMeta()
    {
        return $this->firstImageMeta;
    }
    
    /**
     * Sets the first image meta.
     *
     * @param array $firstImageMeta
     *
     * @return void
     */
    public function setFirstImageMeta($firstImageMeta = [])
    {
        if ($this->firstImageMeta !== $firstImageMeta) {
            $this->firstImageMeta = $firstImageMeta;
        }
    }
    
    /**
     * Returns the second image.
     *
     * @return File
     */
    public function getSecondImage()
    {
        if (null !== $this->secondImage) {
            return $this->secondImage;
        }
    
        $fileName = $this->secondImageFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getSecondImage().');
        }
    
        $filePath = $this->_uploadBasePath . 'secondimage/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->secondImage = new File($filePath);
            $this->setSecondImageUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setSecondImageFileName('');
            $this->setSecondImageUrl('');
            $this->setSecondImageMeta([]);
        }
    
        return $this->secondImage;
    }
    
    /**
     * Sets the second image.
     *
     * @param File|null $secondImage
     *
     * @return void
     */
    public function setSecondImage($secondImage)
    {
        if (null === $this->secondImage && null === $secondImage) {
            return;
        }
        if (null !== $this->secondImage && null !== $secondImage && $this->secondImage->getRealPath() === $secondImage->getRealPath()) {
            return;
        }
        $this->secondImage = $secondImage;
    
        if (null === $this->secondImage) {
            $this->setSecondImageFileName('');
            $this->setSecondImageUrl('');
            $this->setSecondImageMeta([]);
        } else {
            $this->setSecondImageFileName($this->secondImage->getFilename());
        }
    }
    
    /**
     * Returns the second image file name.
     *
     * @return string
     */
    public function getSecondImageFileName()
    {
        return $this->secondImageFileName;
    }
    
    /**
     * Sets the second image file name.
     *
     * @param string $secondImageFileName
     *
     * @return void
     */
    public function setSecondImageFileName($secondImageFileName)
    {
        if ($this->secondImageFileName !== $secondImageFileName) {
            $this->secondImageFileName = $secondImageFileName;
        }
    }
    
    /**
     * Returns the second image url.
     *
     * @return string
     */
    public function getSecondImageUrl()
    {
        return $this->secondImageUrl;
    }
    
    /**
     * Sets the second image url.
     *
     * @param string $secondImageUrl
     *
     * @return void
     */
    public function setSecondImageUrl($secondImageUrl)
    {
        if ($this->secondImageUrl !== $secondImageUrl) {
            $this->secondImageUrl = $secondImageUrl;
        }
    }
    
    /**
     * Returns the second image meta.
     *
     * @return array
     */
    public function getSecondImageMeta()
    {
        return $this->secondImageMeta;
    }
    
    /**
     * Sets the second image meta.
     *
     * @param array $secondImageMeta
     *
     * @return void
     */
    public function setSecondImageMeta($secondImageMeta = [])
    {
        if ($this->secondImageMeta !== $secondImageMeta) {
            $this->secondImageMeta = $secondImageMeta;
        }
    }
    
    /**
     * Returns the third image.
     *
     * @return File
     */
    public function getThirdImage()
    {
        if (null !== $this->thirdImage) {
            return $this->thirdImage;
        }
    
        $fileName = $this->thirdImageFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getThirdImage().');
        }
    
        $filePath = $this->_uploadBasePath . 'thirdimage/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->thirdImage = new File($filePath);
            $this->setThirdImageUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setThirdImageFileName('');
            $this->setThirdImageUrl('');
            $this->setThirdImageMeta([]);
        }
    
        return $this->thirdImage;
    }
    
    /**
     * Sets the third image.
     *
     * @param File|null $thirdImage
     *
     * @return void
     */
    public function setThirdImage($thirdImage)
    {
        if (null === $this->thirdImage && null === $thirdImage) {
            return;
        }
        if (null !== $this->thirdImage && null !== $thirdImage && $this->thirdImage->getRealPath() === $thirdImage->getRealPath()) {
            return;
        }
        $this->thirdImage = $thirdImage;
    
        if (null === $this->thirdImage) {
            $this->setThirdImageFileName('');
            $this->setThirdImageUrl('');
            $this->setThirdImageMeta([]);
        } else {
            $this->setThirdImageFileName($this->thirdImage->getFilename());
        }
    }
    
    /**
     * Returns the third image file name.
     *
     * @return string
     */
    public function getThirdImageFileName()
    {
        return $this->thirdImageFileName;
    }
    
    /**
     * Sets the third image file name.
     *
     * @param string $thirdImageFileName
     *
     * @return void
     */
    public function setThirdImageFileName($thirdImageFileName)
    {
        if ($this->thirdImageFileName !== $thirdImageFileName) {
            $this->thirdImageFileName = $thirdImageFileName;
        }
    }
    
    /**
     * Returns the third image url.
     *
     * @return string
     */
    public function getThirdImageUrl()
    {
        return $this->thirdImageUrl;
    }
    
    /**
     * Sets the third image url.
     *
     * @param string $thirdImageUrl
     *
     * @return void
     */
    public function setThirdImageUrl($thirdImageUrl)
    {
        if ($this->thirdImageUrl !== $thirdImageUrl) {
            $this->thirdImageUrl = $thirdImageUrl;
        }
    }
    
    /**
     * Returns the third image meta.
     *
     * @return array
     */
    public function getThirdImageMeta()
    {
        return $this->thirdImageMeta;
    }
    
    /**
     * Sets the third image meta.
     *
     * @param array $thirdImageMeta
     *
     * @return void
     */
    public function setThirdImageMeta($thirdImageMeta = [])
    {
        if ($this->thirdImageMeta !== $thirdImageMeta) {
            $this->thirdImageMeta = $thirdImageMeta;
        }
    }
    
    /**
     * Returns the first file.
     *
     * @return File
     */
    public function getFirstFile()
    {
        if (null !== $this->firstFile) {
            return $this->firstFile;
        }
    
        $fileName = $this->firstFileFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getFirstFile().');
        }
    
        $filePath = $this->_uploadBasePath . 'firstfile/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->firstFile = new File($filePath);
            $this->setFirstFileUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setFirstFileFileName('');
            $this->setFirstFileUrl('');
            $this->setFirstFileMeta([]);
        }
    
        return $this->firstFile;
    }
    
    /**
     * Sets the first file.
     *
     * @param File|null $firstFile
     *
     * @return void
     */
    public function setFirstFile($firstFile)
    {
        if (null === $this->firstFile && null === $firstFile) {
            return;
        }
        if (null !== $this->firstFile && null !== $firstFile && $this->firstFile->getRealPath() === $firstFile->getRealPath()) {
            return;
        }
        $this->firstFile = $firstFile;
    
        if (null === $this->firstFile) {
            $this->setFirstFileFileName('');
            $this->setFirstFileUrl('');
            $this->setFirstFileMeta([]);
        } else {
            $this->setFirstFileFileName($this->firstFile->getFilename());
        }
    }
    
    /**
     * Returns the first file file name.
     *
     * @return string
     */
    public function getFirstFileFileName()
    {
        return $this->firstFileFileName;
    }
    
    /**
     * Sets the first file file name.
     *
     * @param string $firstFileFileName
     *
     * @return void
     */
    public function setFirstFileFileName($firstFileFileName)
    {
        if ($this->firstFileFileName !== $firstFileFileName) {
            $this->firstFileFileName = $firstFileFileName;
        }
    }
    
    /**
     * Returns the first file url.
     *
     * @return string
     */
    public function getFirstFileUrl()
    {
        return $this->firstFileUrl;
    }
    
    /**
     * Sets the first file url.
     *
     * @param string $firstFileUrl
     *
     * @return void
     */
    public function setFirstFileUrl($firstFileUrl)
    {
        if ($this->firstFileUrl !== $firstFileUrl) {
            $this->firstFileUrl = $firstFileUrl;
        }
    }
    
    /**
     * Returns the first file meta.
     *
     * @return array
     */
    public function getFirstFileMeta()
    {
        return $this->firstFileMeta;
    }
    
    /**
     * Sets the first file meta.
     *
     * @param array $firstFileMeta
     *
     * @return void
     */
    public function setFirstFileMeta($firstFileMeta = [])
    {
        if ($this->firstFileMeta !== $firstFileMeta) {
            $this->firstFileMeta = $firstFileMeta;
        }
    }
    
    /**
     * Returns the second file.
     *
     * @return File
     */
    public function getSecondFile()
    {
        if (null !== $this->secondFile) {
            return $this->secondFile;
        }
    
        $fileName = $this->secondFileFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getSecondFile().');
        }
    
        $filePath = $this->_uploadBasePath . 'secondfile/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->secondFile = new File($filePath);
            $this->setSecondFileUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setSecondFileFileName('');
            $this->setSecondFileUrl('');
            $this->setSecondFileMeta([]);
        }
    
        return $this->secondFile;
    }
    
    /**
     * Sets the second file.
     *
     * @param File|null $secondFile
     *
     * @return void
     */
    public function setSecondFile($secondFile)
    {
        if (null === $this->secondFile && null === $secondFile) {
            return;
        }
        if (null !== $this->secondFile && null !== $secondFile && $this->secondFile->getRealPath() === $secondFile->getRealPath()) {
            return;
        }
        $this->secondFile = $secondFile;
    
        if (null === $this->secondFile) {
            $this->setSecondFileFileName('');
            $this->setSecondFileUrl('');
            $this->setSecondFileMeta([]);
        } else {
            $this->setSecondFileFileName($this->secondFile->getFilename());
        }
    }
    
    /**
     * Returns the second file file name.
     *
     * @return string
     */
    public function getSecondFileFileName()
    {
        return $this->secondFileFileName;
    }
    
    /**
     * Sets the second file file name.
     *
     * @param string $secondFileFileName
     *
     * @return void
     */
    public function setSecondFileFileName($secondFileFileName)
    {
        if ($this->secondFileFileName !== $secondFileFileName) {
            $this->secondFileFileName = $secondFileFileName;
        }
    }
    
    /**
     * Returns the second file url.
     *
     * @return string
     */
    public function getSecondFileUrl()
    {
        return $this->secondFileUrl;
    }
    
    /**
     * Sets the second file url.
     *
     * @param string $secondFileUrl
     *
     * @return void
     */
    public function setSecondFileUrl($secondFileUrl)
    {
        if ($this->secondFileUrl !== $secondFileUrl) {
            $this->secondFileUrl = $secondFileUrl;
        }
    }
    
    /**
     * Returns the second file meta.
     *
     * @return array
     */
    public function getSecondFileMeta()
    {
        return $this->secondFileMeta;
    }
    
    /**
     * Sets the second file meta.
     *
     * @param array $secondFileMeta
     *
     * @return void
     */
    public function setSecondFileMeta($secondFileMeta = [])
    {
        if ($this->secondFileMeta !== $secondFileMeta) {
            $this->secondFileMeta = $secondFileMeta;
        }
    }
    
    /**
     * Returns the third file.
     *
     * @return File
     */
    public function getThirdFile()
    {
        if (null !== $this->thirdFile) {
            return $this->thirdFile;
        }
    
        $fileName = $this->thirdFileFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getThirdFile().');
        }
    
        $filePath = $this->_uploadBasePath . 'thirdfile/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->thirdFile = new File($filePath);
            $this->setThirdFileUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setThirdFileFileName('');
            $this->setThirdFileUrl('');
            $this->setThirdFileMeta([]);
        }
    
        return $this->thirdFile;
    }
    
    /**
     * Sets the third file.
     *
     * @param File|null $thirdFile
     *
     * @return void
     */
    public function setThirdFile($thirdFile)
    {
        if (null === $this->thirdFile && null === $thirdFile) {
            return;
        }
        if (null !== $this->thirdFile && null !== $thirdFile && $this->thirdFile->getRealPath() === $thirdFile->getRealPath()) {
            return;
        }
        $this->thirdFile = $thirdFile;
    
        if (null === $this->thirdFile) {
            $this->setThirdFileFileName('');
            $this->setThirdFileUrl('');
            $this->setThirdFileMeta([]);
        } else {
            $this->setThirdFileFileName($this->thirdFile->getFilename());
        }
    }
    
    /**
     * Returns the third file file name.
     *
     * @return string
     */
    public function getThirdFileFileName()
    {
        return $this->thirdFileFileName;
    }
    
    /**
     * Sets the third file file name.
     *
     * @param string $thirdFileFileName
     *
     * @return void
     */
    public function setThirdFileFileName($thirdFileFileName)
    {
        if ($this->thirdFileFileName !== $thirdFileFileName) {
            $this->thirdFileFileName = $thirdFileFileName;
        }
    }
    
    /**
     * Returns the third file url.
     *
     * @return string
     */
    public function getThirdFileUrl()
    {
        return $this->thirdFileUrl;
    }
    
    /**
     * Sets the third file url.
     *
     * @param string $thirdFileUrl
     *
     * @return void
     */
    public function setThirdFileUrl($thirdFileUrl)
    {
        if ($this->thirdFileUrl !== $thirdFileUrl) {
            $this->thirdFileUrl = $thirdFileUrl;
        }
    }
    
    /**
     * Returns the third file meta.
     *
     * @return array
     */
    public function getThirdFileMeta()
    {
        return $this->thirdFileMeta;
    }
    
    /**
     * Sets the third file meta.
     *
     * @param array $thirdFileMeta
     *
     * @return void
     */
    public function setThirdFileMeta($thirdFileMeta = [])
    {
        if ($this->thirdFileMeta !== $thirdFileMeta) {
            $this->thirdFileMeta = $thirdFileMeta;
        }
    }
    
    
    /**
     * Returns the parent.
     *
     * @return \MU\BoardModule\Entity\PostingEntity
     */
    public function getParent()
    {
        return $this->parent;
    }
    
    /**
     * Sets the parent.
     *
     * @param \MU\BoardModule\Entity\PostingEntity $parent
     *
     * @return void
     */
    public function setParent($parent = null)
    {
        $this->parent = $parent;
    }
    
    /**
     * Returns the forum.
     *
     * @return \MU\BoardModule\Entity\ForumEntity
     */
    public function getForum()
    {
        return $this->forum;
    }
    
    /**
     * Sets the forum.
     *
     * @param \MU\BoardModule\Entity\ForumEntity $forum
     *
     * @return void
     */
    public function setForum($forum = null)
    {
        $this->forum = $forum;
    }
    
    /**
     * Returns the children.
     *
     * @return \MU\BoardModule\Entity\PostingEntity[]
     */
    public function getChildren()
    {
        return $this->children;
    }
    
    /**
     * Sets the children.
     *
     * @param \MU\BoardModule\Entity\PostingEntity[] $children
     *
     * @return void
     */
    public function setChildren($children)
    {
        foreach ($this->children as $postingSingle) {
            $this->removeChildren($postingSingle);
        }
        foreach ($children as $postingSingle) {
            $this->addChildren($postingSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\BoardModule\Entity\PostingEntity to the list of children.
     *
     * @param \MU\BoardModule\Entity\PostingEntity $posting The instance to be added to the collection
     *
     * @return void
     */
    public function addChildren(\MU\BoardModule\Entity\PostingEntity $posting)
    {
        $this->children->add($posting);
        $posting->setParent($this);
    }
    
    /**
     * Removes an instance of \MU\BoardModule\Entity\PostingEntity from the list of children.
     *
     * @param \MU\BoardModule\Entity\PostingEntity $posting The instance to be removed from the collection
     *
     * @return void
     */
    public function removeChildren(\MU\BoardModule\Entity\PostingEntity $posting)
    {
        $this->children->removeElement($posting);
        $posting->setParent(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muboardmodule.ui_hooks.postings';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Posting ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setFirstImage(null);
        $this->setSecondImage(null);
        $this->setThirdImage(null);
        $this->setFirstFile(null);
        $this->setSecondFile(null);
        $this->setThirdFile(null);
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
