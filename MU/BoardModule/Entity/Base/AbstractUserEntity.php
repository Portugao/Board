<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\BoardModule\Validator\Constraints as BoardAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for user entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractUserEntity extends EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'user';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="user", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $userid
     */
    protected $userid = 0;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $numberPostings
     */
    protected $numberPostings = 0;
    
    /**
     * @ORM\Column(type="datetime")
     * @Assert\NotBlank()
     * @Assert\DateTime()
     * @var DateTime $lastVisit
     */
    protected $lastVisit;
    
    
    /**
     * Bidirectional - Many user [users] are linked by one rank [rank] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\BoardModule\Entity\RankEntity", inversedBy="user")
     * @ORM\JoinTable(name="mu_board_rank")
     * @Assert\Type(type="MU\BoardModule\Entity\RankEntity")
     * @var \MU\BoardModule\Entity\RankEntity $rank
     */
    protected $rank;
    
    
    /**
     * UserEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the userid.
     *
     * @return integer
     */
    public function getUserid()
    {
        return $this->userid;
    }
    
    /**
     * Sets the userid.
     *
     * @param integer $userid
     *
     * @return void
     */
    public function setUserid($userid)
    {
        if (intval($this->userid) !== intval($userid)) {
            $this->userid = intval($userid);
        }
    }
    
    /**
     * Returns the number postings.
     *
     * @return integer
     */
    public function getNumberPostings()
    {
        return $this->numberPostings;
    }
    
    /**
     * Sets the number postings.
     *
     * @param integer $numberPostings
     *
     * @return void
     */
    public function setNumberPostings($numberPostings)
    {
        if (intval($this->numberPostings) !== intval($numberPostings)) {
            $this->numberPostings = intval($numberPostings);
        }
    }
    
    /**
     * Returns the last visit.
     *
     * @return DateTime
     */
    public function getLastVisit()
    {
        return $this->lastVisit;
    }
    
    /**
     * Sets the last visit.
     *
     * @param DateTime $lastVisit
     *
     * @return void
     */
    public function setLastVisit($lastVisit)
    {
        if ($this->lastVisit !== $lastVisit) {
            if (!(null == $lastVisit && empty($lastVisit)) && !(is_object($lastVisit) && $lastVisit instanceOf \DateTimeInterface)) {
                $lastVisit = new \DateTime($lastVisit);
            }
            
            if (null === $lastVisit || empty($lastVisit)) {
                $lastVisit = new \DateTime();
            }
            
            if ($this->lastVisit != $lastVisit) {
                $this->lastVisit = $lastVisit;
            }
        }
    }
    
    
    /**
     * Returns the rank.
     *
     * @return \MU\BoardModule\Entity\RankEntity
     */
    public function getRank()
    {
        return $this->rank;
    }
    
    /**
     * Sets the rank.
     *
     * @param \MU\BoardModule\Entity\RankEntity $rank
     *
     * @return void
     */
    public function setRank($rank = null)
    {
        $this->rank = $rank;
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muboardmodule.ui_hooks.users';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'User ' . $this->getKey();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
    }
}
