<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\BoardModule\Traits\StandardFieldsTrait;
use MU\BoardModule\Validator\Constraints as BoardAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for rank entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractRankEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'rank';
    
    /**
     * @var string Path to upload base folder
     */
    protected $_uploadBasePath = '';
    
    /**
     * @var string Base URL to upload files
     */
    protected $_uploadBaseUrl = '';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @BoardAssert\ListEntry(entityName="rank", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=100)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="100")
     * @var string $name
     */
    protected $name = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $minPostings
     */
    protected $minPostings = 0;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $maxPostings
     */
    protected $maxPostings = 0;
    
    /**
     * @ORM\Column(type="smallint")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100)
     * @var integer $numberOfIcons
     */
    protected $numberOfIcons = 0;
    
    /**
     * Upload image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $uploadImageMeta
     */
    protected $uploadImageMeta = [];
    
    /**
     * @ORM\Column(name="uploadImage", length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @var string $uploadImageFileName
     */
    protected $uploadImageFileName = null;
    
    /**
     * Full upload image path as url.
     *
     * @Assert\Type(type="string")
     * @var string $uploadImageUrl
     */
    protected $uploadImageUrl = '';
    
    /**
     * Upload image file object.
     *
     * @Assert\File(
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var File $uploadImage
     */
    protected $uploadImage = null;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $special
     */
    protected $special = false;
    
    
    /**
     * Bidirectional - One rank [rank] has many user [users] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\BoardModule\Entity\UserEntity", mappedBy="rank")
     * @ORM\JoinTable(name="mu_board_rankuser")
     * @var \MU\BoardModule\Entity\UserEntity[] $user
     */
    protected $user = null;
    
    
    /**
     * RankEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->user = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = isset($_objectType) ? $_objectType : '';
        }
    }
    
    /**
     * Returns the _upload base path.
     *
     * @return string
     */
    public function get_uploadBasePath()
    {
        return $this->_uploadBasePath;
    }
    
    /**
     * Sets the _upload base path.
     *
     * @param string $_uploadBasePath
     *
     * @return void
     */
    public function set_uploadBasePath($_uploadBasePath)
    {
        if ($this->_uploadBasePath != $_uploadBasePath) {
            $this->_uploadBasePath = isset($_uploadBasePath) ? $_uploadBasePath : '';
        }
    }
    
    /**
     * Returns the _upload base url.
     *
     * @return string
     */
    public function get_uploadBaseUrl()
    {
        return $this->_uploadBaseUrl;
    }
    
    /**
     * Sets the _upload base url.
     *
     * @param string $_uploadBaseUrl
     *
     * @return void
     */
    public function set_uploadBaseUrl($_uploadBaseUrl)
    {
        if ($this->_uploadBaseUrl != $_uploadBaseUrl) {
            $this->_uploadBaseUrl = isset($_uploadBaseUrl) ? $_uploadBaseUrl : '';
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the name.
     *
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }
    
    /**
     * Sets the name.
     *
     * @param string $name
     *
     * @return void
     */
    public function setName($name)
    {
        if ($this->name !== $name) {
            $this->name = isset($name) ? $name : '';
        }
    }
    
    /**
     * Returns the min postings.
     *
     * @return integer
     */
    public function getMinPostings()
    {
        return $this->minPostings;
    }
    
    /**
     * Sets the min postings.
     *
     * @param integer $minPostings
     *
     * @return void
     */
    public function setMinPostings($minPostings)
    {
        if (intval($this->minPostings) !== intval($minPostings)) {
            $this->minPostings = intval($minPostings);
        }
    }
    
    /**
     * Returns the max postings.
     *
     * @return integer
     */
    public function getMaxPostings()
    {
        return $this->maxPostings;
    }
    
    /**
     * Sets the max postings.
     *
     * @param integer $maxPostings
     *
     * @return void
     */
    public function setMaxPostings($maxPostings)
    {
        if (intval($this->maxPostings) !== intval($maxPostings)) {
            $this->maxPostings = intval($maxPostings);
        }
    }
    
    /**
     * Returns the number of icons.
     *
     * @return integer
     */
    public function getNumberOfIcons()
    {
        return $this->numberOfIcons;
    }
    
    /**
     * Sets the number of icons.
     *
     * @param integer $numberOfIcons
     *
     * @return void
     */
    public function setNumberOfIcons($numberOfIcons)
    {
        if (intval($this->numberOfIcons) !== intval($numberOfIcons)) {
            $this->numberOfIcons = intval($numberOfIcons);
        }
    }
    
    /**
     * Returns the upload image.
     *
     * @return File
     */
    public function getUploadImage()
    {
        if (null !== $this->uploadImage) {
            return $this->uploadImage;
        }
    
        $fileName = $this->uploadImageFileName;
        if (!empty($fileName) && !$this->_uploadBasePath) {
            throw new \RuntimeException('Invalid upload base path in ' . get_class($this) . '#getUploadImage().');
        }
    
        $filePath = $this->_uploadBasePath . 'uploadimage/' . $fileName;
        if (!empty($fileName) && file_exists($filePath)) {
            $this->uploadImage = new File($filePath);
            $this->setUploadImageUrl($this->_uploadBaseUrl . '/' . $filePath);
        } else {
            $this->setUploadImageFileName('');
            $this->setUploadImageUrl('');
            $this->setUploadImageMeta([]);
        }
    
        return $this->uploadImage;
    }
    
    /**
     * Sets the upload image.
     *
     * @param File|null $uploadImage
     *
     * @return void
     */
    public function setUploadImage($uploadImage)
    {
        if (null === $this->uploadImage && null === $uploadImage) {
            return;
        }
        if (null !== $this->uploadImage && null !== $uploadImage && $this->uploadImage->getRealPath() === $uploadImage->getRealPath()) {
            return;
        }
        $this->uploadImage = $uploadImage;
    
        if (null === $this->uploadImage) {
            $this->setUploadImageFileName('');
            $this->setUploadImageUrl('');
            $this->setUploadImageMeta([]);
        } else {
            $this->setUploadImageFileName($this->uploadImage->getFilename());
        }
    }
    
    /**
     * Returns the upload image file name.
     *
     * @return string
     */
    public function getUploadImageFileName()
    {
        return $this->uploadImageFileName;
    }
    
    /**
     * Sets the upload image file name.
     *
     * @param string $uploadImageFileName
     *
     * @return void
     */
    public function setUploadImageFileName($uploadImageFileName)
    {
        if ($this->uploadImageFileName !== $uploadImageFileName) {
            $this->uploadImageFileName = $uploadImageFileName;
        }
    }
    
    /**
     * Returns the upload image url.
     *
     * @return string
     */
    public function getUploadImageUrl()
    {
        return $this->uploadImageUrl;
    }
    
    /**
     * Sets the upload image url.
     *
     * @param string $uploadImageUrl
     *
     * @return void
     */
    public function setUploadImageUrl($uploadImageUrl)
    {
        if ($this->uploadImageUrl !== $uploadImageUrl) {
            $this->uploadImageUrl = $uploadImageUrl;
        }
    }
    
    /**
     * Returns the upload image meta.
     *
     * @return array
     */
    public function getUploadImageMeta()
    {
        return $this->uploadImageMeta;
    }
    
    /**
     * Sets the upload image meta.
     *
     * @param array $uploadImageMeta
     *
     * @return void
     */
    public function setUploadImageMeta($uploadImageMeta = [])
    {
        if ($this->uploadImageMeta !== $uploadImageMeta) {
            $this->uploadImageMeta = $uploadImageMeta;
        }
    }
    
    /**
     * Returns the special.
     *
     * @return boolean
     */
    public function getSpecial()
    {
        return $this->special;
    }
    
    /**
     * Sets the special.
     *
     * @param boolean $special
     *
     * @return void
     */
    public function setSpecial($special)
    {
        if (boolval($this->special) !== boolval($special)) {
            $this->special = boolval($special);
        }
    }
    
    
    /**
     * Returns the user.
     *
     * @return \MU\BoardModule\Entity\UserEntity[]
     */
    public function getUser()
    {
        return $this->user;
    }
    
    /**
     * Sets the user.
     *
     * @param \MU\BoardModule\Entity\UserEntity[] $user
     *
     * @return void
     */
    public function setUser($user)
    {
        foreach ($this->user as $userSingle) {
            $this->removeUser($userSingle);
        }
        foreach ($user as $userSingle) {
            $this->addUser($userSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\BoardModule\Entity\UserEntity to the list of user.
     *
     * @param \MU\BoardModule\Entity\UserEntity $user The instance to be added to the collection
     *
     * @return void
     */
    public function addUser(\MU\BoardModule\Entity\UserEntity $user)
    {
        $this->user->add($user);
        $user->setRank($this);
    }
    
    /**
     * Removes an instance of \MU\BoardModule\Entity\UserEntity from the list of user.
     *
     * @param \MU\BoardModule\Entity\UserEntity $user The instance to be removed from the collection
     *
     * @return void
     */
    public function removeUser(\MU\BoardModule\Entity\UserEntity $user)
    {
        $this->user->removeElement($user);
        $user->setRank(null);
    }
    
    
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array List of resulting arguments
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muboardmodule.ui_hooks.ranks';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects Objects that are added to this array
     * 
     * @return array List of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = [])
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Rank ' . $this->getKey() . ': ' . $this->getName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setUploadImage(null);
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
