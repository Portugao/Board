<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Entity\Factory\Base;

use Doctrine\Common\Persistence\ObjectManager;
use Doctrine\ORM\EntityRepository;
use InvalidArgumentException;
use MU\BoardModule\Entity\Factory\EntityInitialiser;
use MU\BoardModule\Helper\CollectionFilterHelper;

/**
 * Factory class used to create entities and receive entity repositories.
 */
abstract class AbstractEntityFactory
{
    /**
     * @var ObjectManager The object manager to be used for determining the repository
     */
    protected $objectManager;

    /**
     * @var EntityInitialiser The entity initialiser for dynamical application of default values
     */
    protected $entityInitialiser;

    /**
     * @var CollectionFilterHelper
     */
    protected $collectionFilterHelper;

    /**
     * EntityFactory constructor.
     *
     * @param ObjectManager          $objectManager          The object manager to be used for determining the repositories
     * @param EntityInitialiser      $entityInitialiser      The entity initialiser for dynamical application of default values
     * @param CollectionFilterHelper $collectionFilterHelper CollectionFilterHelper service instance
     */
    public function __construct(
        ObjectManager $objectManager,
        EntityInitialiser $entityInitialiser,
        CollectionFilterHelper $collectionFilterHelper)
    {
        $this->objectManager = $objectManager;
        $this->entityInitialiser = $entityInitialiser;
        $this->collectionFilterHelper = $collectionFilterHelper;
    }

    /**
     * Returns a repository for a given object type.
     *
     * @param string $objectType Name of desired entity type
     *
     * @return EntityRepository The repository responsible for the given object type
     */
    public function getRepository($objectType)
    {
        $entityClass = 'MU\\BoardModule\\Entity\\' . ucfirst($objectType) . 'Entity';

        $repository = $this->objectManager->getRepository($entityClass);
        $repository->setCollectionFilterHelper($this->collectionFilterHelper);

        return $repository;
    }

    /**
     * Creates a new category instance.
     *
     * @return \MU\BoardModule\Entity\CategoryEntity The newly created entity instance
     */
    public function createCategory()
    {
        $entityClass = 'MU\\BoardModule\\Entity\\CategoryEntity';

        $entity = new $entityClass();

        $this->entityInitialiser->initCategory($entity);

        return $entity;
    }

    /**
     * Creates a new forum instance.
     *
     * @return \MU\BoardModule\Entity\ForumEntity The newly created entity instance
     */
    public function createForum()
    {
        $entityClass = 'MU\\BoardModule\\Entity\\ForumEntity';

        $entity = new $entityClass();

        $this->entityInitialiser->initForum($entity);

        return $entity;
    }

    /**
     * Creates a new posting instance.
     *
     * @return \MU\BoardModule\Entity\PostingEntity The newly created entity instance
     */
    public function createPosting()
    {
        $entityClass = 'MU\\BoardModule\\Entity\\PostingEntity';

        $entity = new $entityClass();

        $this->entityInitialiser->initPosting($entity);

        return $entity;
    }

    /**
     * Creates a new abo instance.
     *
     * @return \MU\BoardModule\Entity\AboEntity The newly created entity instance
     */
    public function createAbo()
    {
        $entityClass = 'MU\\BoardModule\\Entity\\AboEntity';

        $entity = new $entityClass();

        $this->entityInitialiser->initAbo($entity);

        return $entity;
    }

    /**
     * Creates a new user instance.
     *
     * @return \MU\BoardModule\Entity\UserEntity The newly created entity instance
     */
    public function createUser()
    {
        $entityClass = 'MU\\BoardModule\\Entity\\UserEntity';

        $entity = new $entityClass();

        $this->entityInitialiser->initUser($entity);

        return $entity;
    }

    /**
     * Creates a new rank instance.
     *
     * @return \MU\BoardModule\Entity\RankEntity The newly created entity instance
     */
    public function createRank()
    {
        $entityClass = 'MU\\BoardModule\\Entity\\RankEntity';

        $entity = new $entityClass();

        $this->entityInitialiser->initRank($entity);

        return $entity;
    }

    /**
     * Returns the identifier field's name for a given object type.
     *
     * @param string $objectType The object type to be treated
     *
     * @return string Primary identifier field name
     */
    public function getIdField($objectType = '')
    {
        if (empty($objectType)) {
            throw new InvalidArgumentException('Invalid object type received.');
        }
        $entityClass = 'MUBoardModule:' . ucfirst($objectType) . 'Entity';
    
        $meta = $this->getObjectManager()->getClassMetadata($entityClass);
    
        return $meta->getSingleIdentifierFieldName();
    }

    /**
     * Returns the object manager.
     *
     * @return ObjectManager
     */
    public function getObjectManager()
    {
        return $this->objectManager;
    }
    
    /**
     * Sets the object manager.
     *
     * @param ObjectManager $objectManager
     *
     * @return void
     */
    public function setObjectManager($objectManager)
    {
        if ($this->objectManager != $objectManager) {
            $this->objectManager = $objectManager;
        }
    }
    

    /**
     * Returns the entity initialiser.
     *
     * @return EntityInitialiser
     */
    public function getEntityInitialiser()
    {
        return $this->entityInitialiser;
    }
    
    /**
     * Sets the entity initialiser.
     *
     * @param EntityInitialiser $entityInitialiser
     *
     * @return void
     */
    public function setEntityInitialiser($entityInitialiser)
    {
        if ($this->entityInitialiser != $entityInitialiser) {
            $this->entityInitialiser = $entityInitialiser;
        }
    }
    
}
