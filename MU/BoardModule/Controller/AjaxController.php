<?php
/**
 * Board.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\BoardModule\Controller;

use MU\BoardModule\Controller\Base\AbstractAjaxController;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Symfony\Component\HttpFoundation\Response;

/**
 * Ajax controller implementation class.
 *
 * @Route("/ajax")
 */
class AjaxController extends AbstractAjaxController
{
    
    /**
     * Retrieve item list for finder selections in Forms, Content type plugin and Scribite.
     *
     * @Route("/getItemListFinder", options={"expose"=true})
     * @Method("GET")
     *
     * @param string $ot      Name of currently used object type
     * @param string $sort    Sorting field
     * @param string $sortdir Sorting direction
     *
     * @return JsonResponse
     */
    public function getItemListFinderAction(Request $request)
    {
        return parent::getItemListFinderAction($request);
    }
    
    /**
     * Changes a given flag (boolean field) by switching between true and false.
     *
     * @Route("/toggleFlag", options={"expose"=true})
     * @Method("POST")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function toggleFlagAction(Request $request)
    {
        return parent::toggleFlagAction($request);
    }
    
    /**
     * Changes a given state (boolean field) by switching between true and false.
     *
     * @Route("/toggleState", options={"expose"=true})
     * @Method("GET")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function toggleStateAction(Request $request)
    {
    	return $this->toggleStateFunction($request);
    }
    
    
    /**
     * Changes a given flag (boolean field) by switching between true and false.
     *
     * @param Request $request Current request instance
     *
     * @return string $result
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function toggleStateFunction(Request $request)
    {
    	if (!$this->hasPermission('MUBoardModule::Ajax', '::', ACCESS_EDIT)) {
    		throw new AccessDeniedException();
    	}
    
    	$objectType = 'posting';
    	$id = $request->query->getInt('id', 0);
    
    	if ($id == 0) {
    	    $result = $this->__('Error: invalid input.');
        }
    
    			// select data from data source
    			$entityFactory = $this->get('mu_board_module.entity_factory');
    			$repository = $entityFactory->getRepository($objectType);
    			$entity = $repository->selectById($id, false);
    			if (null === $entity) {
    				$result = $this->__('No such item.');
    			}
    			
    			// set new state
    			if ($entity['state'] == 0) {
    				$entity['state'] = 1;
    			} else {
    				$entity['state'] = 0;
    			}
    
    			// save entity back to database
    			$entityFactory->getObjectManager()->flush();
    
    			$logger = $this->get('logger');
    			$logArgs = ['app' => 'MUBoardModule', 'user' => $this->get('zikula_users_module.current_user')->get('uname'), 'entity' => $objectType, 'id' => $id];
    			$logger->notice('{app}: User {user} toggled the state of posting  {entity} with id {id}.', $logArgs);
    
                $response = new Response(
                'Content',
                Response::HTTP_OK,
                array('content-type' => 'text/html')
                );
    			
                // return response
                return new JsonResponse($state);
    }
    
    /**
     * Changes a given state (boolean field) by switching between true and false.
     *
     * @Route("/saveForumPosition", options={"expose"=true})
     * @Method("GET")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function saveForumPositionAction(Request $request)
    {
    	return $this->saveForumPosition($request);
    }
    
    public function saveForumPosition($request)
    {
    	if (!$this->hasPermission('MUBoardModule::Ajax', '::', ACCESS_EDIT)) {
    		throw new AccessDeniedException();
    	}
    	
    	//$objectType = 'posting';
    	$forums = $request->query->get('forums');
    	$forums = explode(',', $forums);
    	
    	if ($forums == '') {
    		$result = $this->__('Error: invalid input.');
    	}
    	
    	// select data from data source
    	$entityFactory = $this->get('mu_board_module.entity_factory');
    	$repository = $entityFactory->getRepository('forum');
    	
    	$index = 0;
    	foreach ($forums as $forum) {
    	
    	$index = $index + 1;
    	$thisForum = $repository->selectById($forum);
    	$thisForum->setPos($index);
    	//$entityManager->flush();
    	/*$thisalbum = $thispicture->getAlbum();
    	$thisAlbumId = $thisalbum['id'];*/
    	
    	// save entity back to database
    	$entityFactory->getObjectManager()->flush();
    	}
    	
    	/*$logger = $this->get('logger');
    	$logArgs = ['app' => 'MUBoardModule', 'user' => $this->get('zikula_users_module.current_user')->get('uname'), 'entity' => $objectType, 'id' => $id];
    	$logger->notice('{app}: User {user} toggled the state of posting  {entity} with id {id}.', $logArgs);*/
    	
        $state = 'Hallo';
    	 
        // return response
        return new JsonResponse([
            'message' => $this->__('The setting has been successfully changed.')
        ]); 	
    }

    // feel free to add your own ajax controller methods here
}
