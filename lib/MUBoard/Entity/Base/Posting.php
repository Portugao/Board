<?php
/**
 * MUBoard.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUBoard
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Oct 14 15:42:51 CEST 2012.
 */

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for posting entities.
 *
 * @abstract
 */
abstract class MUBoard_Entity_Base_Posting extends Zikula_EntityAccess
{

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'posting';

    /**
     * @var array List of primary key field names
     */
    protected $_idFields = array();

    /**
     * @var MUBoard_Entity_Validator_Posting The validator for this entity
     */
    protected $_validator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_hasUniqueSlug = false;

    /**
     * @var array List of available item actions
     */
    protected $_actions = array();



    /**
     * @ORM\Id
     * @ORM\GeneratedValue
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id.
     */
    protected $id = 0;


    /**
     * @ORM\Column(type="bigint", nullable=true)
     * @var bigint $parent_id.
     */
    protected $parent_id = 0;


    /**
     * @ORM\Column(length=255)
     * @var string $title.
     */
    protected $title = '';


    /**
     * @ORM\Column(length=10000)
     * @var string $text.
     */
    protected $text = '';


    /**
     * @ORM\Column(type="bigint")
     * @var bigint $invocations.
     */
    protected $invocations = 0;


    /**
     * @ORM\Column(type="boolean")
     * @var boolean $state.
     */
    protected $state = true;


    /**
     * @ORM\Column(type="boolean")
     * @var boolean $solved.
     */
    protected $solved = false;
    /**
     * First image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $firstImageMeta.
     */
    protected $firstImageMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $firstImage.
     */
    protected $firstImage = '';

    /**
     * The full path to the first image.
     *
     * @var string $firstImageFullPath.
     */
    protected $firstImageFullPath = '';

    /**
     * Full first image path as url.
     *
     * @var string $firstImageFullPathUrl.
     */
    protected $firstImageFullPathUrl = '';
    /**
     * Second image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $secondImageMeta.
     */
    protected $secondImageMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $secondImage.
     */
    protected $secondImage = '';

    /**
     * The full path to the second image.
     *
     * @var string $secondImageFullPath.
     */
    protected $secondImageFullPath = '';

    /**
     * Full second image path as url.
     *
     * @var string $secondImageFullPathUrl.
     */
    protected $secondImageFullPathUrl = '';
    /**
     * Third image meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $thirdImageMeta.
     */
    protected $thirdImageMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $thirdImage.
     */
    protected $thirdImage = '';

    /**
     * The full path to the third image.
     *
     * @var string $thirdImageFullPath.
     */
    protected $thirdImageFullPath = '';

    /**
     * Full third image path as url.
     *
     * @var string $thirdImageFullPathUrl.
     */
    protected $thirdImageFullPathUrl = '';
    /**
     * First file meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $firstFileMeta.
     */
    protected $firstFileMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $firstFile.
     */
    protected $firstFile = '';

    /**
     * The full path to the first file.
     *
     * @var string $firstFileFullPath.
     */
    protected $firstFileFullPath = '';

    /**
     * Full first file path as url.
     *
     * @var string $firstFileFullPathUrl.
     */
    protected $firstFileFullPathUrl = '';
    /**
     * Second file meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $secondFileMeta.
     */
    protected $secondFileMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $secondFile.
     */
    protected $secondFile = '';

    /**
     * The full path to the second file.
     *
     * @var string $secondFileFullPath.
     */
    protected $secondFileFullPath = '';

    /**
     * Full second file path as url.
     *
     * @var string $secondFileFullPathUrl.
     */
    protected $secondFileFullPathUrl = '';
    /**
     * Third file meta data array.
     *
     * @ORM\Column(type="array")
     * @var array $thirdFileMeta.
     */
    protected $thirdFileMeta = array();



    /**
     * @ORM\Column(length=255)
     * @var string $thirdFile.
     */
    protected $thirdFile = '';

    /**
     * The full path to the third file.
     *
     * @var string $thirdFileFullPath.
     */
    protected $thirdFileFullPath = '';

    /**
     * Full third file path as url.
     *
     * @var string $thirdFileFullPathUrl.
     */
    protected $thirdFileFullPathUrl = '';


    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @var integer $createdUserId.
     */
    protected $createdUserId;

    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @var integer $updatedUserId.
     */
    protected $updatedUserId;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @var datetime $createdDate.
     */
    protected $createdDate;

    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @var datetime $updatedDate.
     */
    protected $updatedDate;


    /**
     * Self relations were not working yet, must be retested with Doctrine 2.
     * See #9 for more information
     */
    /**
     * Bidirectional - Many children [postings] are linked by one parent [posting] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MUBoard_Entity_Posting", inversedBy="children")
     * @ORM\JoinTable(name="muboard_posting",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" )},
     *      inverseJoinColumns={@ORM\JoinColumn(name="parent_id", referencedColumnName="id" )}
     * )
     * @var MUBoard_Entity_Posting $parent.
     */
    protected $parent;

    /**
     * Bidirectional - Many posting [postings] are linked by one forum [forum] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MUBoard_Entity_Forum", inversedBy="posting")
     * @ORM\JoinTable(name="muboard_forum")
     * @var MUBoard_Entity_Forum $forum.
     */
    protected $forum;


    /**
     * Self relations were not working yet, must be retested with Doctrine 2.
     * See #9 for more information
     */

    /**
     * Bidirectional - One parent [posting] has many children [postings] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MUBoard_Entity_Posting", mappedBy="parent", cascade={"remove"})
     * @ORM\JoinTable(name="muboard_parentchildren",
     *      joinColumns={@ORM\JoinColumn(name="parent_id", referencedColumnName="id" )},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" )}
     * )
     * @var MUBoard_Entity_Posting[] $children.
     */
    protected $children = null;

    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->id = 1;
        $this->_idFields = array('id');
        $this->initValidator();
        $this->_hasUniqueSlug = false;
        $this->children = new ArrayCollection();
    }

    /**
     * Get _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }

    /**
     * Set _object type.
     *
     * @param string $_objectType.
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }


    /**
     * Get _id fields.
     *
     * @return array
     */
    public function get_idFields()
    {
        return $this->_idFields;
    }

    /**
     * Set _id fields.
     *
     * @param array $_idFields.
     *
     * @return void
     */
    public function set_idFields(array $_idFields = Array())
    {
        $this->_idFields = $_idFields;
    }


    /**
     * Get _validator.
     *
     * @return MUBoard_Entity_Validator_Posting
     */
    public function get_validator()
    {
        return $this->_validator;
    }

    /**
     * Set _validator.
     *
     * @param MUBoard_Entity_Validator_Posting $_validator.
     *
     * @return void
     */
    public function set_validator(MUBoard_Entity_Validator_Posting $_validator = null)
    {
        $this->_validator = $_validator;
    }


    /**
     * Get _has unique slug.
     *
     * @return boolean
     */
    public function get_hasUniqueSlug()
    {
        return $this->_hasUniqueSlug;
    }

    /**
     * Set _has unique slug.
     *
     * @param boolean $_hasUniqueSlug.
     *
     * @return void
     */
    public function set_hasUniqueSlug($_hasUniqueSlug)
    {
        $this->_hasUniqueSlug = $_hasUniqueSlug;
    }


    /**
     * Get _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }

    /**
     * Set _actions.
     *
     * @param array $_actions.
     *
     * @return void
     */
    public function set_actions(array $_actions = Array())
    {
        $this->_actions = $_actions;
    }



    /**
     * Get id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Set id.
     *
     * @param integer $id.
     *
     * @return void
     */
    public function setId($id)
    {
        if ($id != $this->id) {
            $this->id = $id;
        }
    }

    /**
     * Get parent_id.
     *
     * @return bigint
     */
    public function getParent_id()
    {
        return $this->parent_id;
    }

    /**
     * Set parent_id.
     *
     * @param bigint $parent_id.
     *
     * @return void
     */
    public function setParent_id($parent_id)
    {
        if ($parent_id != $this->parent_id) {
            $this->parent_id = $parent_id;
        }
    }

    /**
     * Get title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }

    /**
     * Set title.
     *
     * @param string $title.
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($title != $this->title) {
            $this->title = $title;
        }
    }

    /**
     * Get text.
     *
     * @return string
     */
    public function getText()
    {
        return $this->text;
    }

    /**
     * Set text.
     *
     * @param string $text.
     *
     * @return void
     */
    public function setText($text)
    {
        if ($text != $this->text) {
            $this->text = $text;
        }
    }

    /**
     * Get invocations.
     *
     * @return bigint
     */
    public function getInvocations()
    {
        return $this->invocations;
    }

    /**
     * Set invocations.
     *
     * @param bigint $invocations.
     *
     * @return void
     */
    public function setInvocations($invocations)
    {
        if ($invocations != $this->invocations) {
            $this->invocations = $invocations;
        }
    }

    /**
     * Get state.
     *
     * @return boolean
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * Set state.
     *
     * @param boolean $state.
     *
     * @return void
     */
    public function setState($state)
    {
        if ($state !== $this->state) {
            $this->state = (bool)$state;
        }
    }

    /**
     * Get solved.
     *
     * @return boolean
     */
    public function getSolved()
    {
        return $this->solved;
    }

    /**
     * Set solved.
     *
     * @param boolean $solved.
     *
     * @return void
     */
    public function setSolved($solved)
    {
        if ($solved !== $this->solved) {
            $this->solved = (bool)$solved;
        }
    }

    /**
     * Get first image.
     *
     * @return string
     */
    public function getFirstImage()
    {
        return $this->firstImage;
    }

    /**
     * Set first image.
     *
     * @param string $firstImage.
     *
     * @return void
     */
    public function setFirstImage($firstImage)
    {
        if ($firstImage != $this->firstImage) {
            $this->firstImage = $firstImage;
        }
    }

    /**
     * Get first image full path.
     *
     * @return string
     */
    public function getFirstImageFullPath()
    {
        return $this->firstImageFullPath;
    }

    /**
     * Set first image full path.
     *
     * @param string $firstImageFullPath.
     *
     * @return void
     */
    public function setFirstImageFullPath($firstImageFullPath)
    {
        if ($firstImageFullPath != $this->firstImageFullPath) {
            $this->firstImageFullPath = $firstImageFullPath;
        }
    }

    /**
     * Get first image full path url.
     *
     * @return string
     */
    public function getFirstImageFullPathUrl()
    {
        return $this->firstImageFullPathUrl;
    }

    /**
     * Set first image full path url.
     *
     * @param string $firstImageFullPathUrl.
     *
     * @return void
     */
    public function setFirstImageFullPathUrl($firstImageFullPathUrl)
    {
        if ($firstImageFullPathUrl != $this->firstImageFullPathUrl) {
            $this->firstImageFullPathUrl = $firstImageFullPathUrl;
        }
    }

    /**
     * Get first image meta.
     *
     * @return array
     */
    public function getFirstImageMeta()
    {
        return $this->firstImageMeta;
    }

    /**
     * Set first image meta.
     *
     * @param array $firstImageMeta.
     *
     * @return void
     */
    public function setFirstImageMeta($firstImageMeta = Array())
    {
        if ($firstImageMeta != $this->firstImageMeta) {
            $this->firstImageMeta = $firstImageMeta;
        }
    }

    /**
     * Get second image.
     *
     * @return string
     */
    public function getSecondImage()
    {
        return $this->secondImage;
    }

    /**
     * Set second image.
     *
     * @param string $secondImage.
     *
     * @return void
     */
    public function setSecondImage($secondImage)
    {
        if ($secondImage != $this->secondImage) {
            $this->secondImage = $secondImage;
        }
    }

    /**
     * Get second image full path.
     *
     * @return string
     */
    public function getSecondImageFullPath()
    {
        return $this->secondImageFullPath;
    }

    /**
     * Set second image full path.
     *
     * @param string $secondImageFullPath.
     *
     * @return void
     */
    public function setSecondImageFullPath($secondImageFullPath)
    {
        if ($secondImageFullPath != $this->secondImageFullPath) {
            $this->secondImageFullPath = $secondImageFullPath;
        }
    }

    /**
     * Get second image full path url.
     *
     * @return string
     */
    public function getSecondImageFullPathUrl()
    {
        return $this->secondImageFullPathUrl;
    }

    /**
     * Set second image full path url.
     *
     * @param string $secondImageFullPathUrl.
     *
     * @return void
     */
    public function setSecondImageFullPathUrl($secondImageFullPathUrl)
    {
        if ($secondImageFullPathUrl != $this->secondImageFullPathUrl) {
            $this->secondImageFullPathUrl = $secondImageFullPathUrl;
        }
    }

    /**
     * Get second image meta.
     *
     * @return array
     */
    public function getSecondImageMeta()
    {
        return $this->secondImageMeta;
    }

    /**
     * Set second image meta.
     *
     * @param array $secondImageMeta.
     *
     * @return void
     */
    public function setSecondImageMeta($secondImageMeta = Array())
    {
        if ($secondImageMeta != $this->secondImageMeta) {
            $this->secondImageMeta = $secondImageMeta;
        }
    }

    /**
     * Get third image.
     *
     * @return string
     */
    public function getThirdImage()
    {
        return $this->thirdImage;
    }

    /**
     * Set third image.
     *
     * @param string $thirdImage.
     *
     * @return void
     */
    public function setThirdImage($thirdImage)
    {
        if ($thirdImage != $this->thirdImage) {
            $this->thirdImage = $thirdImage;
        }
    }

    /**
     * Get third image full path.
     *
     * @return string
     */
    public function getThirdImageFullPath()
    {
        return $this->thirdImageFullPath;
    }

    /**
     * Set third image full path.
     *
     * @param string $thirdImageFullPath.
     *
     * @return void
     */
    public function setThirdImageFullPath($thirdImageFullPath)
    {
        if ($thirdImageFullPath != $this->thirdImageFullPath) {
            $this->thirdImageFullPath = $thirdImageFullPath;
        }
    }

    /**
     * Get third image full path url.
     *
     * @return string
     */
    public function getThirdImageFullPathUrl()
    {
        return $this->thirdImageFullPathUrl;
    }

    /**
     * Set third image full path url.
     *
     * @param string $thirdImageFullPathUrl.
     *
     * @return void
     */
    public function setThirdImageFullPathUrl($thirdImageFullPathUrl)
    {
        if ($thirdImageFullPathUrl != $this->thirdImageFullPathUrl) {
            $this->thirdImageFullPathUrl = $thirdImageFullPathUrl;
        }
    }

    /**
     * Get third image meta.
     *
     * @return array
     */
    public function getThirdImageMeta()
    {
        return $this->thirdImageMeta;
    }

    /**
     * Set third image meta.
     *
     * @param array $thirdImageMeta.
     *
     * @return void
     */
    public function setThirdImageMeta($thirdImageMeta = Array())
    {
        if ($thirdImageMeta != $this->thirdImageMeta) {
            $this->thirdImageMeta = $thirdImageMeta;
        }
    }

    /**
     * Get first file.
     *
     * @return string
     */
    public function getFirstFile()
    {
        return $this->firstFile;
    }

    /**
     * Set first file.
     *
     * @param string $firstFile.
     *
     * @return void
     */
    public function setFirstFile($firstFile)
    {
        if ($firstFile != $this->firstFile) {
            $this->firstFile = $firstFile;
        }
    }

    /**
     * Get first file full path.
     *
     * @return string
     */
    public function getFirstFileFullPath()
    {
        return $this->firstFileFullPath;
    }

    /**
     * Set first file full path.
     *
     * @param string $firstFileFullPath.
     *
     * @return void
     */
    public function setFirstFileFullPath($firstFileFullPath)
    {
        if ($firstFileFullPath != $this->firstFileFullPath) {
            $this->firstFileFullPath = $firstFileFullPath;
        }
    }

    /**
     * Get first file full path url.
     *
     * @return string
     */
    public function getFirstFileFullPathUrl()
    {
        return $this->firstFileFullPathUrl;
    }

    /**
     * Set first file full path url.
     *
     * @param string $firstFileFullPathUrl.
     *
     * @return void
     */
    public function setFirstFileFullPathUrl($firstFileFullPathUrl)
    {
        if ($firstFileFullPathUrl != $this->firstFileFullPathUrl) {
            $this->firstFileFullPathUrl = $firstFileFullPathUrl;
        }
    }

    /**
     * Get first file meta.
     *
     * @return array
     */
    public function getFirstFileMeta()
    {
        return $this->firstFileMeta;
    }

    /**
     * Set first file meta.
     *
     * @param array $firstFileMeta.
     *
     * @return void
     */
    public function setFirstFileMeta($firstFileMeta = Array())
    {
        if ($firstFileMeta != $this->firstFileMeta) {
            $this->firstFileMeta = $firstFileMeta;
        }
    }

    /**
     * Get second file.
     *
     * @return string
     */
    public function getSecondFile()
    {
        return $this->secondFile;
    }

    /**
     * Set second file.
     *
     * @param string $secondFile.
     *
     * @return void
     */
    public function setSecondFile($secondFile)
    {
        if ($secondFile != $this->secondFile) {
            $this->secondFile = $secondFile;
        }
    }

    /**
     * Get second file full path.
     *
     * @return string
     */
    public function getSecondFileFullPath()
    {
        return $this->secondFileFullPath;
    }

    /**
     * Set second file full path.
     *
     * @param string $secondFileFullPath.
     *
     * @return void
     */
    public function setSecondFileFullPath($secondFileFullPath)
    {
        if ($secondFileFullPath != $this->secondFileFullPath) {
            $this->secondFileFullPath = $secondFileFullPath;
        }
    }

    /**
     * Get second file full path url.
     *
     * @return string
     */
    public function getSecondFileFullPathUrl()
    {
        return $this->secondFileFullPathUrl;
    }

    /**
     * Set second file full path url.
     *
     * @param string $secondFileFullPathUrl.
     *
     * @return void
     */
    public function setSecondFileFullPathUrl($secondFileFullPathUrl)
    {
        if ($secondFileFullPathUrl != $this->secondFileFullPathUrl) {
            $this->secondFileFullPathUrl = $secondFileFullPathUrl;
        }
    }

    /**
     * Get second file meta.
     *
     * @return array
     */
    public function getSecondFileMeta()
    {
        return $this->secondFileMeta;
    }

    /**
     * Set second file meta.
     *
     * @param array $secondFileMeta.
     *
     * @return void
     */
    public function setSecondFileMeta($secondFileMeta = Array())
    {
        if ($secondFileMeta != $this->secondFileMeta) {
            $this->secondFileMeta = $secondFileMeta;
        }
    }

    /**
     * Get third file.
     *
     * @return string
     */
    public function getThirdFile()
    {
        return $this->thirdFile;
    }

    /**
     * Set third file.
     *
     * @param string $thirdFile.
     *
     * @return void
     */
    public function setThirdFile($thirdFile)
    {
        if ($thirdFile != $this->thirdFile) {
            $this->thirdFile = $thirdFile;
        }
    }

    /**
     * Get third file full path.
     *
     * @return string
     */
    public function getThirdFileFullPath()
    {
        return $this->thirdFileFullPath;
    }

    /**
     * Set third file full path.
     *
     * @param string $thirdFileFullPath.
     *
     * @return void
     */
    public function setThirdFileFullPath($thirdFileFullPath)
    {
        if ($thirdFileFullPath != $this->thirdFileFullPath) {
            $this->thirdFileFullPath = $thirdFileFullPath;
        }
    }

    /**
     * Get third file full path url.
     *
     * @return string
     */
    public function getThirdFileFullPathUrl()
    {
        return $this->thirdFileFullPathUrl;
    }

    /**
     * Set third file full path url.
     *
     * @param string $thirdFileFullPathUrl.
     *
     * @return void
     */
    public function setThirdFileFullPathUrl($thirdFileFullPathUrl)
    {
        if ($thirdFileFullPathUrl != $this->thirdFileFullPathUrl) {
            $this->thirdFileFullPathUrl = $thirdFileFullPathUrl;
        }
    }

    /**
     * Get third file meta.
     *
     * @return array
     */
    public function getThirdFileMeta()
    {
        return $this->thirdFileMeta;
    }

    /**
     * Set third file meta.
     *
     * @param array $thirdFileMeta.
     *
     * @return void
     */
    public function setThirdFileMeta($thirdFileMeta = Array())
    {
        if ($thirdFileMeta != $this->thirdFileMeta) {
            $this->thirdFileMeta = $thirdFileMeta;
        }
    }


    /**
     * Get created user id.
     *
     * @return integer[]
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }

    /**
     * Set created user id.
     *
     * @param integer[] $createdUserId.
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }

    /**
     * Get updated user id.
     *
     * @return integer[]
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }

    /**
     * Set updated user id.
     *
     * @param integer[] $updatedUserId.
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }

    /**
     * Get created date.
     *
     * @return datetime[]
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }

    /**
     * Set created date.
     *
     * @param datetime[] $createdDate.
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }

    /**
     * Get updated date.
     *
     * @return datetime[]
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }

    /**
     * Set updated date.
     *
     * @param datetime[] $updatedDate.
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }

    /**
     * Get parent.
     *
     * @return MUBoard_Entity_Posting
     */
    public function getParent()
    {
        return $this->parent;
    }

    /**
     * Set parent.
     *
     * @param MUBoard_Entity_Posting $parent.
     *
     * @return void
     */
    public function setParent(MUBoard_Entity_Posting $parent = null)
    {
        $this->parent = $parent;
    }


    /**
     * Adds an instance of MUBoard_Entity_Posting to the list of parent.
     *
     * @param MUBoard_Entity_Posting $posting.
     *
     * @return void
     */
    public function addParent(MUBoard_Entity_Posting $posting)
    {
        $this->parent[] = $posting;
        $nameSingle->setChildren($this);
    }

    /**
     * Removes an instance of MUBoard_Entity_Posting from the list of parent.
     *
     * @param MUBoard_Entity_Posting $parent.
     *
     * @return void
     */
    public function removeParent(MUBoard_Entity_Posting $posting)
    {
        $this->parent->removeElement($posting);
        $nameSingle->setChildren(null);
    }

    /**
     * Removes an instance of MUBoard_Entity_Posting from the list of parent by it's identifier.
     *
     * @param integer $parent.
     *
     * @return void
     */
    public function removeParentById($id)
    {
        $this->parent->remove($id);
        $nameSingle->setChildren(null);
    }

    /**
     * Get forum.
     *
     * @return MUBoard_Entity_Forum
     */
    public function getForum()
    {
        return $this->forum;
    }

    /**
     * Set forum.
     *
     * @param MUBoard_Entity_Forum $forum.
     *
     * @return void
     */
    public function setForum(MUBoard_Entity_Forum $forum = null)
    {
        $this->forum = $forum;
    }


    /**
     * Adds an instance of MUBoard_Entity_Forum to the list of forum.
     *
     * @param MUBoard_Entity_Forum $forum.
     *
     * @return void
     */
    public function addForum(MUBoard_Entity_Forum $forum)
    {
        $this->forum[] = $forum;
        $nameSingle->setPosting($this);
    }

    /**
     * Removes an instance of MUBoard_Entity_Forum from the list of forum.
     *
     * @param MUBoard_Entity_Forum $forum.
     *
     * @return void
     */
    public function removeForum(MUBoard_Entity_Forum $forum)
    {
        $this->forum->removeElement($forum);
        $nameSingle->setPosting(null);
    }

    /**
     * Removes an instance of MUBoard_Entity_Forum from the list of forum by it's identifier.
     *
     * @param integer $forum.
     *
     * @return void
     */
    public function removeForumById($id)
    {
        $this->forum->remove($id);
        $nameSingle->setPosting(null);
    }


    /**
     * Get children.
     *
     * @return MUBoard_Entity_Posting[]
     */
    public function getChildren()
    {
        return $this->children;
    }

    /**
     * Set children.
     *
     * @param MUBoard_Entity_Posting[] $children.
     *
     * @return void
     */
    public function setChildren($children)
    {
        $this->children = $children;
    }


    /**
     * Adds an instance of MUBoard_Entity_Posting to the list of children.
     *
     * @param MUBoard_Entity_Posting $posting.
     *
     * @return void
     */
    public function addChildren(MUBoard_Entity_Posting $posting)
    {
        $this->children[] = $posting;
    }

    /**
     * Removes an instance of MUBoard_Entity_Posting from the list of children.
     *
     * @param MUBoard_Entity_Posting $children.
     *
     * @return void
     */
    public function removeChildren(MUBoard_Entity_Posting $posting)
    {
        $this->children->removeElement($posting);
    }

    /**
     * Removes an instance of MUBoard_Entity_Posting from the list of children by it's identifier.
     *
     * @param integer $children.
     *
     * @return void
     */
    public function removeChildrenById($id)
    {
        $this->children->remove($id);
    }



    /**
     * Initialise validator and return it's instance.
     *
     * @return MUBoard_Entity_Validator_Posting The validator for this entity.
     */
    public function initValidator()
    {
        if (!is_null($this->_validator)) {
            return $this->_validator;
        }
        $this->_validator = new MUBoard_Entity_Validator_Posting($this);
        return $this->_validator;
    }

    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return void.
     */
    public function validate()
    {
        $result = $this->initValidator()->validateAll();
        if (is_array($result)) {
            throw new Zikula_Exception($result['message'], $result['code'], $result['debugArray']);
        }
    }

    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data.
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }

    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        $dom = ZLanguage::getModuleDomain('MUBoard');
        if ($currentType == 'admin') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'posting', 'id' => $this['id'])),
                        'icon' => 'preview',
                        'linkTitle' => __('Open preview page', $dom),
                        'linkText' => __('Preview', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'display', 'arguments' => array('ot' => 'posting', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['title']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission('MUBoard::', '.*', ACCESS_EDIT)) {

                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'posting', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'edit', 'arguments' => array('ot' => 'posting', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
                if (SecurityUtil::checkPermission('MUBoard::', '.*', ACCESS_DELETE)) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'delete', 'arguments' => array('ot' => 'posting', 'id' => $this['id'])),
                        'icon' => 'delete',
                        'linkTitle' => __('Delete', $dom),
                        'linkText' => __('Delete', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'admin', 'func' => 'view', 'arguments' => array('ot' => 'posting')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
        if ($currentType == 'user') {
            if (in_array($currentFunc, array('main', 'view'))) {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'display', 'arguments' => array('ot' => 'posting', 'id' => $this['id'])),
                        'icon' => 'display',
                        'linkTitle' => str_replace('"', '', $this['title']),
                        'linkText' => __('Details', $dom)
                    );
            }

            if (in_array($currentFunc, array('main', 'view', 'display'))) {
                if (SecurityUtil::checkPermission('MUBoard::', '.*', ACCESS_EDIT)) {

                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'posting', 'id' => $this['id'])),
                        'icon' => 'edit',
                        'linkTitle' => __('Edit', $dom),
                        'linkText' => __('Edit', $dom)
                    );
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'edit', 'arguments' => array('ot' => 'posting', 'astemplate' => $this['id'])),
                        'icon' => 'saveas',
                        'linkTitle' => __('Reuse for new item', $dom),
                        'linkText' => __('Reuse', $dom)
                    );
                }
            }
            if ($currentFunc == 'display') {
                    $this->_actions[] = array(
                        'url' => array('type' => 'user', 'func' => 'view', 'arguments' => array('ot' => 'posting')),
                        'icon' => 'back',
                        'linkTitle' => __('Back to overview', $dom),
                        'linkText' => __('Back to overview', $dom)
                    );
            }
        }
    }




    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MUBoard_Entity_Posting::postLoadCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';

        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'main', 'GETPOST', FILTER_SANITIZE_STRING);
        // initialise the upload handler
        $uploadManager = new MUBoard_UploadHandler();

        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this['parent_id'] = (int) ((isset($this['parent_id']) && !empty($this['parent_id'])) ? DataUtil::formatForDisplay($this['parent_id']) : 0);
    if ($currentFunc != 'edit') {
        $this['title'] = ((isset($this['title']) && !empty($this['title'])) ? DataUtil::formatForDisplayHTML($this['title']) : '');
    }
    if ($currentFunc != 'edit') {
        $this['text'] = ((isset($this['text']) && !empty($this['text'])) ? DataUtil::formatForDisplayHTML($this['text']) : '');
    }
        $this['invocations'] = (int) ((isset($this['invocations']) && !empty($this['invocations'])) ? DataUtil::formatForDisplay($this['invocations']) : 0);
        $this['state'] = (bool) $this['state'];
        $this['solved'] = (bool) $this['solved'];
        if (!empty($this['firstImage'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('posting', 'firstImage');
            $fullPath = $basePath .  $this['firstImage'];
            $this['firstImageFullPath'] = $fullPath;
            $this['firstImageFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['firstImageMeta']) || !is_array($this['firstImageMeta']) || !count($this['firstImageMeta'])) {
                // assign new meta data
                $this['firstImageMeta'] = $uploadManager->readMetaDataForFile($this['firstImage'], $fullPath);
            }
        }
        if (!empty($this['secondImage'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('posting', 'secondImage');
            $fullPath = $basePath .  $this['secondImage'];
            $this['secondImageFullPath'] = $fullPath;
            $this['secondImageFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['secondImageMeta']) || !is_array($this['secondImageMeta']) || !count($this['secondImageMeta'])) {
                // assign new meta data
                $this['secondImageMeta'] = $uploadManager->readMetaDataForFile($this['secondImage'], $fullPath);
            }
        }
        if (!empty($this['thirdImage'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('posting', 'thirdImage');
            $fullPath = $basePath .  $this['thirdImage'];
            $this['thirdImageFullPath'] = $fullPath;
            $this['thirdImageFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['thirdImageMeta']) || !is_array($this['thirdImageMeta']) || !count($this['thirdImageMeta'])) {
                // assign new meta data
                $this['thirdImageMeta'] = $uploadManager->readMetaDataForFile($this['thirdImage'], $fullPath);
            }
        }
        if (!empty($this['firstFile'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('posting', 'firstFile');
            $fullPath = $basePath .  $this['firstFile'];
            $this['firstFileFullPath'] = $fullPath;
            $this['firstFileFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['firstFileMeta']) || !is_array($this['firstFileMeta']) || !count($this['firstFileMeta'])) {
                // assign new meta data
                $this['firstFileMeta'] = $uploadManager->readMetaDataForFile($this['firstFile'], $fullPath);
            }
        }
        if (!empty($this['secondFile'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('posting', 'secondFile');
            $fullPath = $basePath .  $this['secondFile'];
            $this['secondFileFullPath'] = $fullPath;
            $this['secondFileFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['secondFileMeta']) || !is_array($this['secondFileMeta']) || !count($this['secondFileMeta'])) {
                // assign new meta data
                $this['secondFileMeta'] = $uploadManager->readMetaDataForFile($this['secondFile'], $fullPath);
            }
        }
        if (!empty($this['thirdFile'])) {
            $basePath = MUBoard_Util_Controller::getFileBaseFolder('posting', 'thirdFile');
            $fullPath = $basePath .  $this['thirdFile'];
            $this['thirdFileFullPath'] = $fullPath;
            $this['thirdFileFullPathURL'] = System::getBaseUrl() . $fullPath;

            // just some backwards compatibility stuff
            if (!isset($this['thirdFileMeta']) || !is_array($this['thirdFileMeta']) || !count($this['thirdFileMeta'])) {
                // assign new meta data
                $this['thirdFileMeta'] = $uploadManager->readMetaDataForFile($this['thirdFile'], $fullPath);
            }
        }
        $this->prepareItemActions();
        return true;
    }

    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MUBoard_Entity_Posting::prePersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPrePersistCallback()
    {
        // echo 'inserting a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MUBoard_Entity_Posting::postPersistCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostPersistCallback()
    {
        // echo 'inserted a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUBoard_Entity_Posting::preRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreRemoveCallback()
    {
/*        // delete workflow for this entity
        $result = Zikula_Workflow_Util::deleteWorkflow($this);
        if ($result === false) {
            $dom = ZLanguage::getModuleDomain('MUBoard');
            return LogUtil::registerError(__('Error! Could not remove stored workflow.', $dom));
        }*/
        return true;
    }

    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MUBoard_Entity_Posting::postRemoveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostRemoveCallback()
    {
        // echo 'deleted a record ...';
        // initialise the upload handler
        $uploadManager = new MUBoard_UploadHandler();

        $uploadFields = array('firstImage', 'secondImage', 'thirdImage', 'firstFile', 'secondFile', 'thirdFile');
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }

            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('posting', $this, $uploadField);
        }
        return true;
    }

    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MUBoard_Entity_Posting::preUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreUpdateCallback()
    {
        // echo 'updating a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MUBoard_Entity_Posting::postUpdateCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostUpdateCallback()
    {
        // echo 'updated a record ...';
        return true;
    }

    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUBoard_Entity_Posting::preSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPreSaveCallback()
    {
        // echo 'saving a record ...';
        $this->validate();
        return true;
    }

    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MUBoard_Entity_Posting::postSaveCallback()
     * @return boolean true if completed successfully else false.
     */
    protected function performPostSaveCallback()
    {
        // echo 'saved a record ...';
        return true;
    }

}
